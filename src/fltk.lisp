;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.10
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :fltk)
(load-foreign-library "libfltk.so")
(load-foreign-library "libfltk_forms.so")



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant FL_MAJOR_VERSION 1)

(cl:export 'FL_MAJOR_VERSION)

(cl:defconstant FL_MINOR_VERSION 3)

(cl:export 'FL_MINOR_VERSION)

(cl:defconstant FL_PATCH_VERSION 0)

(cl:export 'FL_PATCH_VERSION)

(cffi:defcenum Fl_Event
	(:FL_NO_EVENT #.0)
	(:FL_PUSH #.1)
	(:FL_RELEASE #.2)
	(:FL_ENTER #.3)
	(:FL_LEAVE #.4)
	(:FL_DRAG #.5)
	(:FL_FOCUS #.6)
	(:FL_UNFOCUS #.7)
	(:FL_KEYDOWN #.8)
	(:FL_KEYBOARD #.8)
	(:FL_KEYUP #.9)
	(:FL_CLOSE #.10)
	(:FL_MOVE #.11)
	(:FL_SHORTCUT #.12)
	(:FL_DEACTIVATE #.13)
	(:FL_ACTIVATE #.14)
	(:FL_HIDE #.15)
	(:FL_SHOW #.16)
	(:FL_PASTE #.17)
	(:FL_SELECTIONCLEAR #.18)
	(:FL_MOUSEWHEEL #.19)
	(:FL_DND_ENTER #.20)
	(:FL_DND_DRAG #.21)
	(:FL_DND_LEAVE #.22)
	(:FL_DND_RELEASE #.23)
	(:FL_SCREEN_CONFIGURATION_CHANGED #.24)
	(:FL_FULLSCREEN #.25))

(cl:export 'Fl_Event)

(cffi:defcenum Fl_When
	(:FL_WHEN_NEVER #.0)
	(:FL_WHEN_CHANGED #.1)
	(:FL_WHEN_NOT_CHANGED #.2)
	(:FL_WHEN_RELEASE #.4)
	(:FL_WHEN_RELEASE_ALWAYS #.6)
	(:FL_WHEN_ENTER_KEY #.8)
	(:FL_WHEN_ENTER_KEY_ALWAYS #.10)
	(:FL_WHEN_ENTER_KEY_CHANGED #.11))

(cl:export 'Fl_When)

(cl:defconstant FL_Button #xfee8)

(cl:export 'FL_Button)

(cl:defconstant FL_BackSpace #xff08)

(cl:export 'FL_BackSpace)

(cl:defconstant FL_Tab #xff09)

(cl:export 'FL_Tab)

(cl:defconstant FL_Iso_Key #xff0c)

(cl:export 'FL_Iso_Key)

(cl:defconstant FL_Enter #xff0d)

(cl:export 'FL_Enter)

(cl:defconstant FL_Pause #xff13)

(cl:export 'FL_Pause)

(cl:defconstant FL_Scroll_Lock #xff14)

(cl:export 'FL_Scroll_Lock)

(cl:defconstant FL_Escape #xff1b)

(cl:export 'FL_Escape)

(cl:defconstant FL_Home #xff50)

(cl:export 'FL_Home)

(cl:defconstant FL_Left #xff51)

(cl:export 'FL_Left)

(cl:defconstant FL_Up #xff52)

(cl:export 'FL_Up)

(cl:defconstant FL_Right #xff53)

(cl:export 'FL_Right)

(cl:defconstant FL_Down #xff54)

(cl:export 'FL_Down)

(cl:defconstant FL_Page_Up #xff55)

(cl:export 'FL_Page_Up)

(cl:defconstant FL_Page_Down #xff56)

(cl:export 'FL_Page_Down)

(cl:defconstant FL_End #xff57)

(cl:export 'FL_End)

(cl:defconstant FL_Print #xff61)

(cl:export 'FL_Print)

(cl:defconstant FL_Insert #xff63)

(cl:export 'FL_Insert)

(cl:defconstant FL_Menu #xff67)

(cl:export 'FL_Menu)

(cl:defconstant FL_Help #xff68)

(cl:export 'FL_Help)

(cl:defconstant FL_Num_Lock #xff7f)

(cl:export 'FL_Num_Lock)

(cl:defconstant FL_KP #xff80)

(cl:export 'FL_KP)

(cl:defconstant FL_KP_Enter #xff8d)

(cl:export 'FL_KP_Enter)

(cl:defconstant FL_KP_Last #xffbd)

(cl:export 'FL_KP_Last)

(cl:defconstant FL_F #xffbd)

(cl:export 'FL_F)

(cl:defconstant FL_F_Last #xffe0)

(cl:export 'FL_F_Last)

(cl:defconstant FL_Shift_L #xffe1)

(cl:export 'FL_Shift_L)

(cl:defconstant FL_Shift_R #xffe2)

(cl:export 'FL_Shift_R)

(cl:defconstant FL_Control_L #xffe3)

(cl:export 'FL_Control_L)

(cl:defconstant FL_Control_R #xffe4)

(cl:export 'FL_Control_R)

(cl:defconstant FL_Caps_Lock #xffe5)

(cl:export 'FL_Caps_Lock)

(cl:defconstant FL_Meta_L #xffe7)

(cl:export 'FL_Meta_L)

(cl:defconstant FL_Meta_R #xffe8)

(cl:export 'FL_Meta_R)

(cl:defconstant FL_Alt_L #xffe9)

(cl:export 'FL_Alt_L)

(cl:defconstant FL_Alt_R #xffea)

(cl:export 'FL_Alt_R)

(cl:defconstant FL_Delete #xffff)

(cl:export 'FL_Delete)

(cl:defconstant FL_Volume_Down #xEF11)

(cl:export 'FL_Volume_Down)

(cl:defconstant FL_Volume_Mute #xEF12)

(cl:export 'FL_Volume_Mute)

(cl:defconstant FL_Volume_Up #xEF13)

(cl:export 'FL_Volume_Up)

(cl:defconstant FL_Media_Play #xEF14)

(cl:export 'FL_Media_Play)

(cl:defconstant FL_Media_Stop #xEF15)

(cl:export 'FL_Media_Stop)

(cl:defconstant FL_Media_Prev #xEF16)

(cl:export 'FL_Media_Prev)

(cl:defconstant FL_Media_Next #xEF17)

(cl:export 'FL_Media_Next)

(cl:defconstant FL_Home_Page #xEF18)

(cl:export 'FL_Home_Page)

(cl:defconstant FL_Mail #xEF19)

(cl:export 'FL_Mail)

(cl:defconstant FL_Search #xEF1B)

(cl:export 'FL_Search)

(cl:defconstant FL_Back #xEF26)

(cl:export 'FL_Back)

(cl:defconstant FL_Forward #xEF27)

(cl:export 'FL_Forward)

(cl:defconstant FL_Stop #xEF28)

(cl:export 'FL_Stop)

(cl:defconstant FL_Refresh #xEF29)

(cl:export 'FL_Refresh)

(cl:defconstant FL_Sleep #xEF2F)

(cl:export 'FL_Sleep)

(cl:defconstant FL_Favorites #xEF30)

(cl:export 'FL_Favorites)

(cl:defconstant FL_LEFT_MOUSE 1)

(cl:export 'FL_LEFT_MOUSE)

(cl:defconstant FL_MIDDLE_MOUSE 2)

(cl:export 'FL_MIDDLE_MOUSE)

(cl:defconstant FL_RIGHT_MOUSE 3)

(cl:export 'FL_RIGHT_MOUSE)

(cl:defconstant FL_SHIFT #x00010000)

(cl:export 'FL_SHIFT)

(cl:defconstant FL_CAPS_LOCK #x00020000)

(cl:export 'FL_CAPS_LOCK)

(cl:defconstant FL_CTRL #x00040000)

(cl:export 'FL_CTRL)

(cl:defconstant FL_ALT #x00080000)

(cl:export 'FL_ALT)

(cl:defconstant FL_NUM_LOCK #x00100000)

(cl:export 'FL_NUM_LOCK)

(cl:defconstant FL_META #x00400000)

(cl:export 'FL_META)

(cl:defconstant FL_SCROLL_LOCK #x00800000)

(cl:export 'FL_SCROLL_LOCK)

(cl:defconstant FL_BUTTON1 #x01000000)

(cl:export 'FL_BUTTON1)

(cl:defconstant FL_BUTTON2 #x02000000)

(cl:export 'FL_BUTTON2)

(cl:defconstant FL_BUTTON3 #x04000000)

(cl:export 'FL_BUTTON3)

(cl:defconstant FL_BUTTONS #x7f000000)

(cl:export 'FL_BUTTONS)

(cl:defconstant FL_KEY_MASK #x0000ffff)

(cl:export 'FL_KEY_MASK)

(cl:defconstant FL_COMMAND #x00040000)

(cl:export 'FL_COMMAND)

(cl:defconstant FL_CONTROL #x00400000)

(cl:export 'FL_CONTROL)

(cffi:defcenum Fl_Boxtype
	(:FL_NO_BOX #.0)
	:FL_FLAT_BOX
	:FL_UP_BOX
	:FL_DOWN_BOX
	:FL_UP_FRAME
	:FL_DOWN_FRAME
	:FL_THIN_UP_BOX
	:FL_THIN_DOWN_BOX
	:FL_THIN_UP_FRAME
	:FL_THIN_DOWN_FRAME
	:FL_ENGRAVED_BOX
	:FL_EMBOSSED_BOX
	:FL_ENGRAVED_FRAME
	:FL_EMBOSSED_FRAME
	:FL_BORDER_BOX
	:_FL_SHADOW_BOX
	:FL_BORDER_FRAME
	:_FL_SHADOW_FRAME
	:_FL_ROUNDED_BOX
	:_FL_RSHADOW_BOX
	:_FL_ROUNDED_FRAME
	:_FL_RFLAT_BOX
	:_FL_ROUND_UP_BOX
	:_FL_ROUND_DOWN_BOX
	:_FL_DIAMOND_UP_BOX
	:_FL_DIAMOND_DOWN_BOX
	:_FL_OVAL_BOX
	:_FL_OSHADOW_BOX
	:_FL_OVAL_FRAME
	:_FL_OFLAT_BOX
	:_FL_PLASTIC_UP_BOX
	:_FL_PLASTIC_DOWN_BOX
	:_FL_PLASTIC_UP_FRAME
	:_FL_PLASTIC_DOWN_FRAME
	:_FL_PLASTIC_THIN_UP_BOX
	:_FL_PLASTIC_THIN_DOWN_BOX
	:_FL_PLASTIC_ROUND_UP_BOX
	:_FL_PLASTIC_ROUND_DOWN_BOX
	:_FL_GTK_UP_BOX
	:_FL_GTK_DOWN_BOX
	:_FL_GTK_UP_FRAME
	:_FL_GTK_DOWN_FRAME
	:_FL_GTK_THIN_UP_BOX
	:_FL_GTK_THIN_DOWN_BOX
	:_FL_GTK_THIN_UP_FRAME
	:_FL_GTK_THIN_DOWN_FRAME
	:_FL_GTK_ROUND_UP_BOX
	:_FL_GTK_ROUND_DOWN_BOX
	:FL_FREE_BOXTYPE)

(cl:export 'Fl_Boxtype)

(cffi:defcfun ("_wrap_fl_define_FL_ROUND_UP_BOX" fl_define_FL_ROUND_UP_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_ROUND_UP_BOX)

(cffi:defcfun ("_wrap_fl_define_FL_SHADOW_BOX" fl_define_FL_SHADOW_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_SHADOW_BOX)

(cffi:defcfun ("_wrap_fl_define_FL_ROUNDED_BOX" fl_define_FL_ROUNDED_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_ROUNDED_BOX)

(cffi:defcfun ("_wrap_fl_define_FL_RFLAT_BOX" fl_define_FL_RFLAT_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_RFLAT_BOX)

(cffi:defcfun ("_wrap_fl_define_FL_RSHADOW_BOX" fl_define_FL_RSHADOW_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_RSHADOW_BOX)

(cffi:defcfun ("_wrap_fl_define_FL_DIAMOND_BOX" fl_define_FL_DIAMOND_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_DIAMOND_BOX)

(cffi:defcfun ("_wrap_fl_define_FL_OVAL_BOX" fl_define_FL_OVAL_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_OVAL_BOX)

(cffi:defcfun ("_wrap_fl_define_FL_PLASTIC_UP_BOX" fl_define_FL_PLASTIC_UP_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_PLASTIC_UP_BOX)

(cffi:defcfun ("_wrap_fl_define_FL_GTK_UP_BOX" fl_define_FL_GTK_UP_BOX) Fl_Boxtype)

(cl:export 'fl_define_FL_GTK_UP_BOX)

(cffi:defcfun ("_wrap_fl_box" fl_box) Fl_Boxtype
  (b Fl_Boxtype))

(cl:export 'fl_box)

(cffi:defcfun ("_wrap_fl_down" fl_down) Fl_Boxtype
  (b Fl_Boxtype))

(cl:export 'fl_down)

(cffi:defcfun ("_wrap_fl_frame" fl_frame) Fl_Boxtype
  (b Fl_Boxtype))

(cl:export 'fl_frame)

(cffi:defcenum Fl_Labeltype
	(:FL_NORMAL_LABEL #.0)
	:FL_NO_LABEL
	:_FL_SHADOW_LABEL
	:_FL_ENGRAVED_LABEL
	:_FL_EMBOSSED_LABEL
	:_FL_MULTI_LABEL
	:_FL_ICON_LABEL
	:_FL_IMAGE_LABEL
	:FL_FREE_LABELTYPE)

(cl:export 'Fl_Labeltype)

(cffi:defcfun ("_wrap_fl_define_FL_SHADOW_LABEL" fl_define_FL_SHADOW_LABEL) Fl_Labeltype)

(cl:export 'fl_define_FL_SHADOW_LABEL)

(cffi:defcfun ("_wrap_fl_define_FL_ENGRAVED_LABEL" fl_define_FL_ENGRAVED_LABEL) Fl_Labeltype)

(cl:export 'fl_define_FL_ENGRAVED_LABEL)

(cffi:defcfun ("_wrap_fl_define_FL_EMBOSSED_LABEL" fl_define_FL_EMBOSSED_LABEL) Fl_Labeltype)

(cl:export 'fl_define_FL_EMBOSSED_LABEL)

(cl:defconstant FL_NUM_FREE_COLOR 16)

(cl:export 'FL_NUM_FREE_COLOR)

(cl:defconstant FL_NUM_GRAY 24)

(cl:export 'FL_NUM_GRAY)

(cl:defconstant FL_NUM_RED 5)

(cl:export 'FL_NUM_RED)

(cl:defconstant FL_NUM_GREEN 8)

(cl:export 'FL_NUM_GREEN)

(cl:defconstant FL_NUM_BLUE 5)

(cl:export 'FL_NUM_BLUE)

(cffi:defcfun ("_wrap_fl_inactive" fl_inactive) :unsigned-int
  (c :unsigned-int))

(cl:export 'fl_inactive)

(cffi:defcfun ("_wrap_fl_contrast" fl_contrast) :unsigned-int
  (fg :unsigned-int)
  (bg :unsigned-int))

(cl:export 'fl_contrast)

(cffi:defcfun ("_wrap_fl_color_average" fl_color_average) :unsigned-int
  (c1 :unsigned-int)
  (c2 :unsigned-int)
  (weight :float))

(cl:export 'fl_color_average)

(cffi:defcfun ("_wrap_fl_lighter" fl_lighter) :unsigned-int
  (c :unsigned-int))

(cl:export 'fl_lighter)

(cffi:defcfun ("_wrap_fl_darker" fl_darker) :unsigned-int
  (c :unsigned-int))

(cl:export 'fl_darker)

(cffi:defcfun ("_wrap_fl_rgb_color__SWIG_0" fl_rgb_color) :unsigned-int
  (r :unsigned-char)
  (g :unsigned-char)
  (b :unsigned-char))

(cl:export 'fl_rgb_color)

(cffi:defcfun ("_wrap_fl_rgb_color__SWIG_1" fl_rgb_color) :unsigned-int
  (g :unsigned-char))

(cl:export 'fl_rgb_color)

(cffi:defcfun ("_wrap_fl_gray_ramp" fl_gray_ramp) :unsigned-int
  (i :int))

(cl:export 'fl_gray_ramp)

(cffi:defcfun ("_wrap_fl_color_cube" fl_color_cube) :unsigned-int
  (r :int)
  (g :int)
  (b :int))

(cl:export 'fl_color_cube)

(cffi:defcenum Fl_Cursor
	(:FL_CURSOR_DEFAULT #.0)
	(:FL_CURSOR_ARROW #.1)
	(:FL_CURSOR_CROSS #.2)
	(:FL_CURSOR_WAIT #.3)
	(:FL_CURSOR_INSERT #.4)
	(:FL_CURSOR_HAND #.5)
	(:FL_CURSOR_HELP #.6)
	(:FL_CURSOR_MOVE #.7)
	(:FL_CURSOR_NS #.101)
	(:FL_CURSOR_WE #.102)
	(:FL_CURSOR_NWSE #.103)
	(:FL_CURSOR_NESW #.104)
	(:FL_CURSOR_NE #.110)
	(:FL_CURSOR_N #.111)
	(:FL_CURSOR_NW #.112)
	(:FL_CURSOR_E #.113)
	(:FL_CURSOR_W #.114)
	(:FL_CURSOR_SE #.115)
	(:FL_CURSOR_S #.116)
	(:FL_CURSOR_SW #.117)
	(:FL_CURSOR_NONE #.255))

(cl:export 'Fl_Cursor)

(defanonenum 
	(FL_READ #.1)
	(FL_WRITE #.4)
	(FL_EXCEPT #.8))

(cl:export 'FL_READ)

(cl:export 'FL_WRITE)

(cl:export 'FL_EXCEPT)

(cffi:defcenum Fl_Mode
	(:FL_RGB #.0)
	(:FL_INDEX #.1)
	(:FL_SINGLE #.0)
	(:FL_DOUBLE #.2)
	(:FL_ACCUM #.4)
	(:FL_ALPHA #.8)
	(:FL_DEPTH #.16)
	(:FL_STENCIL #.32)
	(:FL_RGB8 #.64)
	(:FL_MULTISAMPLE #.128)
	(:FL_STEREO #.256)
	(:FL_FAKE_SINGLE #.512))

(cl:export 'Fl_Mode)

(cl:defconstant FL_IMAGE_WITH_ALPHA #x40000000)

(cl:export 'FL_IMAGE_WITH_ALPHA)

(cffi:defcenum Fl_Damage
	(:FL_DAMAGE_CHILD #.#x01)
	(:FL_DAMAGE_EXPOSE #.#x02)
	(:FL_DAMAGE_SCROLL #.#x04)
	(:FL_DAMAGE_OVERLAY #.#x08)
	(:FL_DAMAGE_USER1 #.#x10)
	(:FL_DAMAGE_USER2 #.#x20)
	(:FL_DAMAGE_ALL #.#x80))

(cl:export 'Fl_Damage)

(cffi:defcfun ("_wrap_Fl_call_screen_init" Fl_call_screen_init) :void)

(cl:export 'Fl_call_screen_init)

(cffi:defcfun ("_wrap_Fl_damage__SWIG_0" Fl_damage) :void
  (d :int))

(cl:export 'Fl_damage)

(cffi:defcenum Fl_Option
	(:OPTION_ARROW_FOCUS #.0)
	:OPTION_VISIBLE_FOCUS
	:OPTION_DND_TEXT
	:OPTION_SHOW_TOOLTIPS
	:OPTION_LAST)

(cl:export 'Fl_Option)

(cffi:defcfun ("_wrap_Fl_option__SWIG_0" Fl_option) :pointer
  (opt :pointer))

(cl:export 'Fl_option)

(cffi:defcfun ("_wrap_Fl_option__SWIG_1" Fl_option) :void
  (opt :pointer)
  (val :pointer))

(cl:export 'Fl_option)

(cffi:defcfun ("_wrap_Fl_add_awake_handler_" Fl_add_awake_handler_) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export 'Fl_add_awake_handler_)

(cffi:defcfun ("_wrap_Fl_version" Fl_version) :double)

(cl:export 'Fl_version)

(cffi:defcfun ("_wrap_Fl_arg" Fl_arg) :int
  (argc :int)
  (argv :pointer)
  (i :pointer))

(cl:export 'Fl_arg)

(cffi:defcfun ("_wrap_Fl_args__SWIG_0" Fl_args) :int
  (argc :int)
  (argv :pointer)
  (i :pointer)
  (cb :pointer))

(cl:export 'Fl_args)

(cffi:defcfun ("_wrap_Fl_args__SWIG_1" Fl_args) :void
  (argc :int)
  (argv :pointer))

(cl:export 'Fl_args)

(cffi:defcfun ("_wrap_Fl_display" Fl_display) :void
  (arg0 :string))

(cl:export 'Fl_display)

(cffi:defcfun ("_wrap_Fl_visual" Fl_visual) :int
  (arg0 :int))

(cl:export 'Fl_visual)

(cffi:defcfun ("_wrap_Fl_own_colormap" Fl_own_colormap) :void)

(cl:export 'Fl_own_colormap)

(cffi:defcfun ("_wrap_Fl_get_system_colors" Fl_get_system_colors) :void)

(cl:export 'Fl_get_system_colors)

(cffi:defcfun ("_wrap_Fl_foreground" Fl_foreground) :void
  (arg0 :unsigned-char)
  (arg1 :unsigned-char)
  (arg2 :unsigned-char))

(cl:export 'Fl_foreground)

(cffi:defcfun ("_wrap_Fl_background" Fl_background) :void
  (arg0 :unsigned-char)
  (arg1 :unsigned-char)
  (arg2 :unsigned-char))

(cl:export 'Fl_background)

(cffi:defcfun ("_wrap_Fl_background2" Fl_background2) :void
  (arg0 :unsigned-char)
  (arg1 :unsigned-char)
  (arg2 :unsigned-char))

(cl:export 'Fl_background2)

(cffi:defcfun ("_wrap_Fl_scheme__SWIG_0" Fl_scheme) :int
  (arg0 :string))

(cl:export 'Fl_scheme)

(cffi:defcfun ("_wrap_Fl_scheme__SWIG_1" Fl_scheme) :string)

(cl:export 'Fl_scheme)

(cffi:defcfun ("_wrap_Fl_reload_scheme" Fl_reload_scheme) :int)

(cl:export 'Fl_reload_scheme)

(cffi:defcfun ("_wrap_Fl_scrollbar_size__SWIG_0" Fl_scrollbar_size) :int)

(cl:export 'Fl_scrollbar_size)

(cffi:defcfun ("_wrap_Fl_scrollbar_size__SWIG_1" Fl_scrollbar_size) :void
  (W :int))

(cl:export 'Fl_scrollbar_size)

(cffi:defcfun ("_wrap_Fl_wait__SWIG_0" Fl_wait) :int)

(cl:export 'Fl_wait)

(cffi:defcfun ("_wrap_Fl_wait__SWIG_1" Fl_wait) :double
  (time :double))

(cl:export 'Fl_wait)

(cffi:defcfun ("_wrap_Fl_check" Fl_check) :int)

(cl:export 'Fl_check)

(cffi:defcfun ("_wrap_Fl_ready" Fl_ready) :int)

(cl:export 'Fl_ready)

(cffi:defcfun ("_wrap_Fl_run" Fl_run) :int)

(cl:export 'Fl_run)

(cffi:defcfun ("_wrap_Fl_readqueue" Fl_readqueue) :pointer)

(cl:export 'Fl_readqueue)

(cffi:defcfun ("_wrap_Fl_has_timeout" Fl_has_timeout) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export 'Fl_has_timeout)

(cffi:defcfun ("_wrap_Fl_add_idle" Fl_add_idle) :void
  (cb :pointer)
  (data :pointer))

(cl:export 'Fl_add_idle)

(cffi:defcfun ("_wrap_Fl_has_idle" Fl_has_idle) :int
  (cb :pointer)
  (data :pointer))

(cl:export 'Fl_has_idle)

(cffi:defcfun ("_wrap_Fl_remove_idle" Fl_remove_idle) :void
  (cb :pointer)
  (data :pointer))

(cl:export 'Fl_remove_idle)

(cffi:defcfun ("_wrap_Fl_damage__SWIG_1" Fl_damage) :int)

(cl:export 'Fl_damage)

(cffi:defcfun ("_wrap_Fl_redraw" Fl_redraw) :void)

(cl:export 'Fl_redraw)

(cffi:defcfun ("_wrap_Fl_flush" Fl_flush) :void)

(cl:export 'Fl_flush)

(cffi:defcfun ("_wrap_Fl_first_window__SWIG_0" Fl_first_window) :pointer)

(cl:export 'Fl_first_window)

(cffi:defcfun ("_wrap_Fl_first_window__SWIG_1" Fl_first_window) :void
  (arg0 :pointer))

(cl:export 'Fl_first_window)

(cffi:defcfun ("_wrap_Fl_next_window" Fl_next_window) :pointer
  (arg0 :pointer))

(cl:export 'Fl_next_window)

(cffi:defcfun ("_wrap_Fl_modal" Fl_modal) :pointer)

(cl:export 'Fl_modal)

(cffi:defcfun ("_wrap_Fl_grab__SWIG_0" Fl_grab) :pointer)

(cl:export 'Fl_grab)

(cffi:defcfun ("_wrap_Fl_grab__SWIG_1" Fl_grab) :void
  (arg0 :pointer))

(cl:export 'Fl_grab)

(cffi:defcfun ("_wrap_Fl_event" Fl_event) :int)

(cl:export 'Fl_event)

(cffi:defcfun ("_wrap_Fl_event_x" Fl_event_x) :int)

(cl:export 'Fl_event_x)

(cffi:defcfun ("_wrap_Fl_event_y" Fl_event_y) :int)

(cl:export 'Fl_event_y)

(cffi:defcfun ("_wrap_Fl_event_x_root" Fl_event_x_root) :int)

(cl:export 'Fl_event_x_root)

(cffi:defcfun ("_wrap_Fl_event_y_root" Fl_event_y_root) :int)

(cl:export 'Fl_event_y_root)

(cffi:defcfun ("_wrap_Fl_event_dx" Fl_event_dx) :int)

(cl:export 'Fl_event_dx)

(cffi:defcfun ("_wrap_Fl_event_dy" Fl_event_dy) :int)

(cl:export 'Fl_event_dy)

(cffi:defcfun ("_wrap_Fl_get_mouse" Fl_get_mouse) :void
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export 'Fl_get_mouse)

(cffi:defcfun ("_wrap_Fl_event_clicks__SWIG_0" Fl_event_clicks) :int)

(cl:export 'Fl_event_clicks)

(cffi:defcfun ("_wrap_Fl_event_clicks__SWIG_1" Fl_event_clicks) :void
  (i :int))

(cl:export 'Fl_event_clicks)

(cffi:defcfun ("_wrap_Fl_event_is_click__SWIG_0" Fl_event_is_click) :int)

(cl:export 'Fl_event_is_click)

(cffi:defcfun ("_wrap_Fl_event_is_click__SWIG_1" Fl_event_is_click) :void
  (i :int))

(cl:export 'Fl_event_is_click)

(cffi:defcfun ("_wrap_Fl_event_button" Fl_event_button) :int)

(cl:export 'Fl_event_button)

(cffi:defcfun ("_wrap_Fl_event_state__SWIG_0" Fl_event_state) :int)

(cl:export 'Fl_event_state)

(cffi:defcfun ("_wrap_Fl_event_state__SWIG_1" Fl_event_state) :int
  (i :int))

(cl:export 'Fl_event_state)

(cffi:defcfun ("_wrap_Fl_event_key__SWIG_0" Fl_event_key) :int)

(cl:export 'Fl_event_key)

(cffi:defcfun ("_wrap_Fl_event_original_key" Fl_event_original_key) :int)

(cl:export 'Fl_event_original_key)

(cffi:defcfun ("_wrap_Fl_event_key__SWIG_1" Fl_event_key) :int
  (key :int))

(cl:export 'Fl_event_key)

(cffi:defcfun ("_wrap_Fl_get_key" Fl_get_key) :int
  (key :int))

(cl:export 'Fl_get_key)

(cffi:defcfun ("_wrap_Fl_event_text" Fl_event_text) :string)

(cl:export 'Fl_event_text)

(cffi:defcfun ("_wrap_Fl_event_length" Fl_event_length) :int)

(cl:export 'Fl_event_length)

(cffi:defcfun ("_wrap_Fl_compose" Fl_compose) :int
  (del :pointer))

(cl:export 'Fl_compose)

(cffi:defcfun ("_wrap_Fl_compose_reset" Fl_compose_reset) :void)

(cl:export 'Fl_compose_reset)

(cffi:defcfun ("_wrap_Fl_event_inside__SWIG_0" Fl_event_inside) :int
  (arg0 :int)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int))

(cl:export 'Fl_event_inside)

(cffi:defcfun ("_wrap_Fl_event_inside__SWIG_1" Fl_event_inside) :int
  (arg0 :pointer))

(cl:export 'Fl_event_inside)

(cffi:defcfun ("_wrap_Fl_test_shortcut" Fl_test_shortcut) :int
  (arg0 :pointer))

(cl:export 'Fl_test_shortcut)

(cffi:defcfun ("_wrap_Fl_handle" Fl_handle) :int
  (arg0 :int)
  (arg1 :pointer))

(cl:export 'Fl_handle)

(cffi:defcfun ("_wrap_Fl_handle_" Fl_handle_) :int
  (arg0 :int)
  (arg1 :pointer))

(cl:export 'Fl_handle_)

(cffi:defcfun ("_wrap_Fl_belowmouse__SWIG_0" Fl_belowmouse) :pointer)

(cl:export 'Fl_belowmouse)

(cffi:defcfun ("_wrap_Fl_belowmouse__SWIG_1" Fl_belowmouse) :void
  (arg0 :pointer))

(cl:export 'Fl_belowmouse)

(cffi:defcfun ("_wrap_Fl_pushed__SWIG_0" Fl_pushed) :pointer)

(cl:export 'Fl_pushed)

(cffi:defcfun ("_wrap_Fl_pushed__SWIG_1" Fl_pushed) :void
  (arg0 :pointer))

(cl:export 'Fl_pushed)

(cffi:defcfun ("_wrap_Fl_focus__SWIG_0" Fl_focus) :pointer)

(cl:export 'Fl_focus)

(cffi:defcfun ("_wrap_Fl_focus__SWIG_1" Fl_focus) :void
  (arg0 :pointer))

(cl:export 'Fl_focus)

(cffi:defcfun ("_wrap_Fl_event_dispatch__SWIG_0" Fl_event_dispatch) :void
  (d :pointer))

(cl:export 'Fl_event_dispatch)

(cffi:defcfun ("_wrap_Fl_event_dispatch__SWIG_1" Fl_event_dispatch) :pointer)

(cl:export 'Fl_event_dispatch)

(cffi:defcfun ("_wrap_Fl_copy" Fl_copy) :void
  (stuff :string)
  (len :int)
  (destination :int))

(cl:export 'Fl_copy)

(cffi:defcfun ("_wrap_Fl_paste__SWIG_0" Fl_paste) :void
  (receiver :pointer)
  (source :int))

(cl:export 'Fl_paste)

(cffi:defcfun ("_wrap_Fl_add_clipboard_notify" Fl_add_clipboard_notify) :void
  (h :pointer)
  (data :pointer))

(cl:export 'Fl_add_clipboard_notify)

(cffi:defcfun ("_wrap_Fl_remove_clipboard_notify" Fl_remove_clipboard_notify) :void
  (h :pointer))

(cl:export 'Fl_remove_clipboard_notify)

(cffi:defcfun ("_wrap_Fl_dnd" Fl_dnd) :int)

(cl:export 'Fl_dnd)

(cffi:defcfun ("_wrap_Fl_selection_owner__SWIG_0" Fl_selection_owner) :pointer)

(cl:export 'Fl_selection_owner)

(cffi:defcfun ("_wrap_Fl_selection_owner__SWIG_1" Fl_selection_owner) :void
  (arg0 :pointer))

(cl:export 'Fl_selection_owner)

(cffi:defcfun ("_wrap_Fl_selection" Fl_selection) :void
  (owner :pointer)
  (arg1 :string)
  (len :int))

(cl:export 'Fl_selection)

(cffi:defcfun ("_wrap_Fl_paste__SWIG_1" Fl_paste) :void
  (receiver :pointer))

(cl:export 'Fl_paste)

(cffi:defcfun ("_wrap_Fl_x" Fl_x) :int)

(cl:export 'Fl_x)

(cffi:defcfun ("_wrap_Fl_y" Fl_y) :int)

(cl:export 'Fl_y)

(cffi:defcfun ("_wrap_Fl_w" Fl_w) :int)

(cl:export 'Fl_w)

(cffi:defcfun ("_wrap_Fl_h" Fl_h) :int)

(cl:export 'Fl_h)

(cffi:defcfun ("_wrap_Fl_screen_count" Fl_screen_count) :int)

(cl:export 'Fl_screen_count)

(cffi:defcfun ("_wrap_Fl_screen_xywh__SWIG_0" Fl_screen_xywh) :void
  (X :pointer)
  (Y :pointer)
  (W :pointer)
  (H :pointer))

(cl:export 'Fl_screen_xywh)

(cffi:defcfun ("_wrap_Fl_screen_xywh__SWIG_1" Fl_screen_xywh) :void
  (X :pointer)
  (Y :pointer)
  (W :pointer)
  (H :pointer)
  (mx :int)
  (my :int))

(cl:export 'Fl_screen_xywh)

(cffi:defcfun ("_wrap_Fl_screen_xywh__SWIG_2" Fl_screen_xywh) :void
  (X :pointer)
  (Y :pointer)
  (W :pointer)
  (H :pointer)
  (n :int))

(cl:export 'Fl_screen_xywh)

(cffi:defcfun ("_wrap_Fl_screen_xywh__SWIG_3" Fl_screen_xywh) :void
  (X :pointer)
  (Y :pointer)
  (W :pointer)
  (H :pointer)
  (mx :int)
  (my :int)
  (mw :int)
  (mh :int))

(cl:export 'Fl_screen_xywh)

(cffi:defcfun ("_wrap_Fl_screen_num__SWIG_0" Fl_screen_num) :int
  (x :int)
  (y :int))

(cl:export 'Fl_screen_num)

(cffi:defcfun ("_wrap_Fl_screen_num__SWIG_1" Fl_screen_num) :int
  (x :int)
  (y :int)
  (w :int)
  (h :int))

(cl:export 'Fl_screen_num)

(cffi:defcfun ("_wrap_Fl_screen_dpi" Fl_screen_dpi) :void
  (h :pointer)
  (v :pointer)
  (n :int))

(cl:export 'Fl_screen_dpi)

(cffi:defcfun ("_wrap_Fl_screen_work_area__SWIG_0" Fl_screen_work_area) :void
  (X :pointer)
  (Y :pointer)
  (W :pointer)
  (H :pointer)
  (mx :int)
  (my :int))

(cl:export 'Fl_screen_work_area)

(cffi:defcfun ("_wrap_Fl_screen_work_area__SWIG_1" Fl_screen_work_area) :void
  (X :pointer)
  (Y :pointer)
  (W :pointer)
  (H :pointer)
  (n :int))

(cl:export 'Fl_screen_work_area)

(cffi:defcfun ("_wrap_Fl_screen_work_area__SWIG_2" Fl_screen_work_area) :void
  (X :pointer)
  (Y :pointer)
  (W :pointer)
  (H :pointer))

(cl:export 'Fl_screen_work_area)

(cffi:defcfun ("_wrap_Fl_set_color__SWIG_0" Fl_set_color) :void
  (arg0 :unsigned-int)
  (arg1 :unsigned-char)
  (arg2 :unsigned-char)
  (arg3 :unsigned-char))

(cl:export 'Fl_set_color)

(cffi:defcfun ("_wrap_Fl_set_color__SWIG_1" Fl_set_color) :void
  (i :unsigned-int)
  (c :unsigned-int))

(cl:export 'Fl_set_color)

(cffi:defcfun ("_wrap_Fl_get_color" Fl_get_color) :void
  (i :unsigned-int)
  (red :pointer)
  (green :pointer)
  (blue :pointer))

(cl:export 'Fl_get_color)

(cffi:defcfun ("_wrap_Fl_free_color" Fl_free_color) :void
  (i :unsigned-int)
  (overlay :int))

(cl:export 'Fl_free_color)

(cffi:defcfun ("_wrap_Fl_get_font" Fl_get_font) :string
  (arg0 :int))

(cl:export 'Fl_get_font)

(cffi:defcfun ("_wrap_Fl_get_font_name" Fl_get_font_name) :string
  (arg0 :int)
  (attributes :pointer))

(cl:export 'Fl_get_font_name)

(cffi:defcfun ("_wrap_Fl_get_font_sizes" Fl_get_font_sizes) :int
  (arg0 :int)
  (sizep :pointer))

(cl:export 'Fl_get_font_sizes)

(cffi:defcfun ("_wrap_Fl_set_font__SWIG_0" Fl_set_font) :void
  (arg0 :int)
  (arg1 :string))

(cl:export 'Fl_set_font)

(cffi:defcfun ("_wrap_Fl_set_font__SWIG_1" Fl_set_font) :void
  (arg0 :int)
  (arg1 :int))

(cl:export 'Fl_set_font)

(cffi:defcfun ("_wrap_Fl_set_fonts" Fl_set_fonts) :int
  (arg0 :string))

(cl:export 'Fl_set_fonts)

(cffi:defcfun ("_wrap_Fl_set_labeltype" Fl_set_labeltype) :void
  (arg0 Fl_Labeltype)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export 'Fl_set_labeltype)

(cffi:defcfun ("_wrap_Fl_get_boxtype" Fl_get_boxtype) :pointer
  (arg0 Fl_Boxtype))

(cl:export 'Fl_get_boxtype)

(cffi:defcfun ("_wrap_Fl_set_boxtype__SWIG_0" Fl_set_boxtype) :void
  (arg0 Fl_Boxtype)
  (arg1 :pointer)
  (arg2 :unsigned-char)
  (arg3 :unsigned-char)
  (arg4 :unsigned-char)
  (arg5 :unsigned-char))

(cl:export 'Fl_set_boxtype)

(cffi:defcfun ("_wrap_Fl_set_boxtype__SWIG_1" Fl_set_boxtype) :void
  (arg0 Fl_Boxtype)
  (from Fl_Boxtype))

(cl:export 'Fl_set_boxtype)

(cffi:defcfun ("_wrap_Fl_box_dx" Fl_box_dx) :int
  (arg0 Fl_Boxtype))

(cl:export 'Fl_box_dx)

(cffi:defcfun ("_wrap_Fl_box_dy" Fl_box_dy) :int
  (arg0 Fl_Boxtype))

(cl:export 'Fl_box_dy)

(cffi:defcfun ("_wrap_Fl_box_dw" Fl_box_dw) :int
  (arg0 Fl_Boxtype))

(cl:export 'Fl_box_dw)

(cffi:defcfun ("_wrap_Fl_box_dh" Fl_box_dh) :int
  (arg0 Fl_Boxtype))

(cl:export 'Fl_box_dh)

(cffi:defcfun ("_wrap_Fl_draw_box_active" Fl_draw_box_active) :int)

(cl:export 'Fl_draw_box_active)

(cffi:defcfun ("_wrap_Fl_set_abort" Fl_set_abort) :void
  (f :pointer))

(cl:export 'Fl_set_abort)

(cffi:defcfun ("_wrap_Fl_default_atclose" Fl_default_atclose) :void
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export 'Fl_default_atclose)

(cffi:defcfun ("_wrap_Fl_set_atclose" Fl_set_atclose) :void
  (f :pointer))

(cl:export 'Fl_set_atclose)

(cffi:defcfun ("_wrap_Fl_event_shift" Fl_event_shift) :int)

(cl:export 'Fl_event_shift)

(cffi:defcfun ("_wrap_Fl_event_ctrl" Fl_event_ctrl) :int)

(cl:export 'Fl_event_ctrl)

(cffi:defcfun ("_wrap_Fl_event_command" Fl_event_command) :int)

(cl:export 'Fl_event_command)

(cffi:defcfun ("_wrap_Fl_event_alt" Fl_event_alt) :int)

(cl:export 'Fl_event_alt)

(cffi:defcfun ("_wrap_Fl_event_buttons" Fl_event_buttons) :int)

(cl:export 'Fl_event_buttons)

(cffi:defcfun ("_wrap_Fl_event_button1" Fl_event_button1) :int)

(cl:export 'Fl_event_button1)

(cffi:defcfun ("_wrap_Fl_event_button2" Fl_event_button2) :int)

(cl:export 'Fl_event_button2)

(cffi:defcfun ("_wrap_Fl_event_button3" Fl_event_button3) :int)

(cl:export 'Fl_event_button3)

(cffi:defcfun ("_wrap_Fl_set_idle" Fl_set_idle) :void
  (cb :pointer))

(cl:export 'Fl_set_idle)

(cffi:defcfun ("_wrap_Fl_release" Fl_release) :void)

(cl:export 'Fl_release)

(cffi:defcfun ("_wrap_Fl_visible_focus__SWIG_0" Fl_visible_focus) :void
  (v :int))

(cl:export 'Fl_visible_focus)

(cffi:defcfun ("_wrap_Fl_visible_focus__SWIG_1" Fl_visible_focus) :int)

(cl:export 'Fl_visible_focus)

(cffi:defcfun ("_wrap_Fl_dnd_text_ops__SWIG_0" Fl_dnd_text_ops) :void
  (v :int))

(cl:export 'Fl_dnd_text_ops)

(cffi:defcfun ("_wrap_Fl_dnd_text_ops__SWIG_1" Fl_dnd_text_ops) :int)

(cl:export 'Fl_dnd_text_ops)

(cffi:defcfun ("_wrap_Fl_lock" Fl_lock) :int)

(cl:export 'Fl_lock)

(cffi:defcfun ("_wrap_Fl_unlock" Fl_unlock) :void)

(cl:export 'Fl_unlock)

(cffi:defcfun ("_wrap_Fl_awake__SWIG_0" Fl_awake) :void
  (message :pointer))

(cl:export 'Fl_awake)

(cffi:defcfun ("_wrap_Fl_awake__SWIG_1" Fl_awake) :int
  (cb :pointer)
  (message :pointer))

(cl:export 'Fl_awake)

(cffi:defcfun ("_wrap_Fl_thread_message" Fl_thread_message) :pointer)

(cl:export 'Fl_thread_message)

(cffi:defcfun ("_wrap_Fl_delete_widget" Fl_delete_widget) :void
  (w :pointer))

(cl:export 'Fl_delete_widget)

(cffi:defcfun ("_wrap_Fl_do_widget_deletion" Fl_do_widget_deletion) :void)

(cl:export 'Fl_do_widget_deletion)

(cffi:defcfun ("_wrap_Fl_watch_widget_pointer" Fl_watch_widget_pointer) :void
  (w :pointer))

(cl:export 'Fl_watch_widget_pointer)

(cffi:defcfun ("_wrap_Fl_release_widget_pointer" Fl_release_widget_pointer) :void
  (w :pointer))

(cl:export 'Fl_release_widget_pointer)

(cffi:defcfun ("_wrap_Fl_clear_widget_pointer" Fl_clear_widget_pointer) :void
  (w :pointer))

(cl:export 'Fl_clear_widget_pointer)

(cffi:defcfun ("_wrap_delete_Fl" delete_Fl) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_Fl_Widget_Tracker" new_Fl_Widget_Tracker) :pointer
  (wi :pointer))

(cl:export 'new_Fl_Widget_Tracker)

(cffi:defcfun ("_wrap_delete_Fl_Widget_Tracker" delete_Fl_Widget_Tracker) :void
  (self :pointer))

(cl:export 'delete_Fl_Widget_Tracker)

(cffi:defcfun ("_wrap_Fl_Widget_Tracker_widget" Fl_Widget_Tracker_widget) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_Tracker_widget)

(cffi:defcfun ("_wrap_Fl_Widget_Tracker_deleted" Fl_Widget_Tracker_deleted) :int
  (self :pointer))

(cl:export 'Fl_Widget_Tracker_deleted)

(cffi:defcfun ("_wrap_Fl_Widget_Tracker_exists" Fl_Widget_Tracker_exists) :int
  (self :pointer))

(cl:export 'Fl_Widget_Tracker_exists)

(defanonenum 
	(INACTIVE #.(cl:ash 1 0))
	(INVISIBLE #.(cl:ash 1 1))
	(OUTPUT #.(cl:ash 1 2))
	(NOBORDER #.(cl:ash 1 3))
	(FORCE_POSITION #.(cl:ash 1 4))
	(NON_MODAL #.(cl:ash 1 5))
	(SHORTCUT_LABEL #.(cl:ash 1 6))
	(CHANGED #.(cl:ash 1 7))
	(OVERRIDE #.(cl:ash 1 8))
	(VISIBLE_FOCUS #.(cl:ash 1 9))
	(COPIED_LABEL #.(cl:ash 1 10))
	(CLIP_CHILDREN #.(cl:ash 1 11))
	(MENU_WINDOW #.(cl:ash 1 12))
	(TOOLTIP_WINDOW #.(cl:ash 1 13))
	(MODAL #.(cl:ash 1 14))
	(NO_OVERLAY #.(cl:ash 1 15))
	(GROUP_RELATIVE #.(cl:ash 1 16))
	(COPIED_TOOLTIP #.(cl:ash 1 17))
	(FULLSCREEN #.(cl:ash 1 18))
	(SIMPLE_KEYBOARD #.(cl:ash 1 19))
	(USERFLAG3 #.(cl:ash 1 29))
	(USERFLAG2 #.(cl:ash 1 30))
	(USERFLAG1 #.(cl:ash 1 31)))

(cl:export 'INACTIVE)

(cl:export 'INVISIBLE)

(cl:export 'OUTPUT)

(cl:export 'NOBORDER)

(cl:export 'FORCE_POSITION)

(cl:export 'NON_MODAL)

(cl:export 'SHORTCUT_LABEL)

(cl:export 'CHANGED)

(cl:export 'OVERRIDE)

(cl:export 'VISIBLE_FOCUS)

(cl:export 'COPIED_LABEL)

(cl:export 'CLIP_CHILDREN)

(cl:export 'MENU_WINDOW)

(cl:export 'TOOLTIP_WINDOW)

(cl:export 'MODAL)

(cl:export 'NO_OVERLAY)

(cl:export 'GROUP_RELATIVE)

(cl:export 'COPIED_TOOLTIP)

(cl:export 'FULLSCREEN)

(cl:export 'SIMPLE_KEYBOARD)

(cl:export 'USERFLAG3)

(cl:export 'USERFLAG2)

(cl:export 'USERFLAG1)

(cffi:defcfun ("_wrap_delete_Fl_Widget" delete_Fl_Widget) :void
  (self :pointer))

(cl:export 'delete_Fl_Widget)

(cffi:defcfun ("_wrap_Fl_Widget_draw" Fl_Widget_draw) :void
  (self :pointer))

(cl:export 'Fl_Widget_draw)

(cffi:defcfun ("_wrap_Fl_Widget_handle" Fl_Widget_handle) :int
  (self :pointer)
  (event :int))

(cl:export 'Fl_Widget_handle)

(cffi:defcfun ("_wrap_Fl_Widget_parent__SWIG_0" Fl_Widget_parent) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_parent)

(cffi:defcfun ("_wrap_Fl_Widget_parent__SWIG_1" Fl_Widget_parent) :void
  (self :pointer)
  (p :pointer))

(cl:export 'Fl_Widget_parent)

(cffi:defcfun ("_wrap_Fl_Widget_type__SWIG_0" Fl_Widget_type) :unsigned-char
  (self :pointer))

(cl:export 'Fl_Widget_type)

(cffi:defcfun ("_wrap_Fl_Widget_type__SWIG_1" Fl_Widget_type) :void
  (self :pointer)
  (t_arg1 :unsigned-char))

(cl:export 'Fl_Widget_type)

(cffi:defcfun ("_wrap_Fl_Widget_x" Fl_Widget_x) :int
  (self :pointer))

(cl:export 'Fl_Widget_x)

(cffi:defcfun ("_wrap_Fl_Widget_y" Fl_Widget_y) :int
  (self :pointer))

(cl:export 'Fl_Widget_y)

(cffi:defcfun ("_wrap_Fl_Widget_w" Fl_Widget_w) :int
  (self :pointer))

(cl:export 'Fl_Widget_w)

(cffi:defcfun ("_wrap_Fl_Widget_h" Fl_Widget_h) :int
  (self :pointer))

(cl:export 'Fl_Widget_h)

(cffi:defcfun ("_wrap_Fl_Widget_resize" Fl_Widget_resize) :void
  (self :pointer)
  (x :int)
  (y :int)
  (w :int)
  (h :int))

(cl:export 'Fl_Widget_resize)

(cffi:defcfun ("_wrap_Fl_Widget_damage_resize" Fl_Widget_damage_resize) :int
  (self :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int))

(cl:export 'Fl_Widget_damage_resize)

(cffi:defcfun ("_wrap_Fl_Widget_position" Fl_Widget_position) :void
  (self :pointer)
  (X :int)
  (Y :int))

(cl:export 'Fl_Widget_position)

(cffi:defcfun ("_wrap_Fl_Widget_size" Fl_Widget_size) :void
  (self :pointer)
  (W :int)
  (H :int))

(cl:export 'Fl_Widget_size)

(cffi:defcfun ("_wrap_Fl_Widget_align__SWIG_0" Fl_Widget_align) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_align)

(cffi:defcfun ("_wrap_Fl_Widget_align__SWIG_1" Fl_Widget_align) :void
  (self :pointer)
  (alignment :unsigned-int))

(cl:export 'Fl_Widget_align)

(cffi:defcfun ("_wrap_Fl_Widget_box__SWIG_0" Fl_Widget_box) Fl_Boxtype
  (self :pointer))

(cl:export 'Fl_Widget_box)

(cffi:defcfun ("_wrap_Fl_Widget_box__SWIG_1" Fl_Widget_box) :void
  (self :pointer)
  (new_box Fl_Boxtype))

(cl:export 'Fl_Widget_box)

(cffi:defcfun ("_wrap_Fl_Widget_color__SWIG_0" Fl_Widget_color) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_color)

(cffi:defcfun ("_wrap_Fl_Widget_color__SWIG_1" Fl_Widget_color) :void
  (self :pointer)
  (bg :unsigned-int))

(cl:export 'Fl_Widget_color)

(cffi:defcfun ("_wrap_Fl_Widget_selection_color__SWIG_0" Fl_Widget_selection_color) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_selection_color)

(cffi:defcfun ("_wrap_Fl_Widget_selection_color__SWIG_1" Fl_Widget_selection_color) :void
  (self :pointer)
  (a :unsigned-int))

(cl:export 'Fl_Widget_selection_color)

(cffi:defcfun ("_wrap_Fl_Widget_color__SWIG_2" Fl_Widget_color) :void
  (self :pointer)
  (bg :unsigned-int)
  (sel :unsigned-int))

(cl:export 'Fl_Widget_color)

(cffi:defcfun ("_wrap_Fl_Widget_label__SWIG_0" Fl_Widget_label) :string
  (self :pointer))

(cl:export 'Fl_Widget_label)

(cffi:defcfun ("_wrap_Fl_Widget_label__SWIG_1" Fl_Widget_label) :void
  (self :pointer)
  (text :string))

(cl:export 'Fl_Widget_label)

(cffi:defcfun ("_wrap_Fl_Widget_copy_label" Fl_Widget_copy_label) :void
  (self :pointer)
  (new_label :string))

(cl:export 'Fl_Widget_copy_label)

(cffi:defcfun ("_wrap_Fl_Widget_label__SWIG_2" Fl_Widget_label) :void
  (self :pointer)
  (a Fl_Labeltype)
  (b :string))

(cl:export 'Fl_Widget_label)

(cffi:defcfun ("_wrap_Fl_Widget_labeltype__SWIG_0" Fl_Widget_labeltype) Fl_Labeltype
  (self :pointer))

(cl:export 'Fl_Widget_labeltype)

(cffi:defcfun ("_wrap_Fl_Widget_labeltype__SWIG_1" Fl_Widget_labeltype) :void
  (self :pointer)
  (a Fl_Labeltype))

(cl:export 'Fl_Widget_labeltype)

(cffi:defcfun ("_wrap_Fl_Widget_labelcolor__SWIG_0" Fl_Widget_labelcolor) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_labelcolor)

(cffi:defcfun ("_wrap_Fl_Widget_labelcolor__SWIG_1" Fl_Widget_labelcolor) :void
  (self :pointer)
  (c :unsigned-int))

(cl:export 'Fl_Widget_labelcolor)

(cffi:defcfun ("_wrap_Fl_Widget_labelfont__SWIG_0" Fl_Widget_labelfont) :int
  (self :pointer))

(cl:export 'Fl_Widget_labelfont)

(cffi:defcfun ("_wrap_Fl_Widget_labelfont__SWIG_1" Fl_Widget_labelfont) :void
  (self :pointer)
  (f :int))

(cl:export 'Fl_Widget_labelfont)

(cffi:defcfun ("_wrap_Fl_Widget_labelsize__SWIG_0" Fl_Widget_labelsize) :int
  (self :pointer))

(cl:export 'Fl_Widget_labelsize)

(cffi:defcfun ("_wrap_Fl_Widget_labelsize__SWIG_1" Fl_Widget_labelsize) :void
  (self :pointer)
  (pix :int))

(cl:export 'Fl_Widget_labelsize)

(cffi:defcfun ("_wrap_Fl_Widget_image__SWIG_0" Fl_Widget_image) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_image)

(cffi:defcfun ("_wrap_Fl_Widget_image__SWIG_1" Fl_Widget_image) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_image)

(cffi:defcfun ("_wrap_Fl_Widget_image__SWIG_2" Fl_Widget_image) :void
  (self :pointer)
  (img :pointer))

(cl:export 'Fl_Widget_image)

(cffi:defcfun ("_wrap_Fl_Widget_deimage__SWIG_0" Fl_Widget_deimage) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_deimage)

(cffi:defcfun ("_wrap_Fl_Widget_deimage__SWIG_1" Fl_Widget_deimage) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_deimage)

(cffi:defcfun ("_wrap_Fl_Widget_deimage__SWIG_2" Fl_Widget_deimage) :void
  (self :pointer)
  (img :pointer))

(cl:export 'Fl_Widget_deimage)

(cffi:defcfun ("_wrap_Fl_Widget_tooltip__SWIG_0" Fl_Widget_tooltip) :string
  (self :pointer))

(cl:export 'Fl_Widget_tooltip)

(cffi:defcfun ("_wrap_Fl_Widget_tooltip__SWIG_1" Fl_Widget_tooltip) :void
  (self :pointer)
  (text :string))

(cl:export 'Fl_Widget_tooltip)

(cffi:defcfun ("_wrap_Fl_Widget_copy_tooltip" Fl_Widget_copy_tooltip) :void
  (self :pointer)
  (text :string))

(cl:export 'Fl_Widget_copy_tooltip)

(cffi:defcfun ("_wrap_Fl_Widget_callback__SWIG_0" Fl_Widget_callback) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_callback)

(cffi:defcfun ("_wrap_Fl_Widget_callback__SWIG_1" Fl_Widget_callback) :void
  (self :pointer)
  (cb :pointer)
  (p :pointer))

(cl:export 'Fl_Widget_callback)

(cffi:defcfun ("_wrap_Fl_Widget_callback__SWIG_2" Fl_Widget_callback) :void
  (self :pointer)
  (cb :pointer))

(cl:export 'Fl_Widget_callback)

(cffi:defcfun ("_wrap_Fl_Widget_callback__SWIG_3" Fl_Widget_callback) :void
  (self :pointer)
  (cb :pointer))

(cl:export 'Fl_Widget_callback)

(cffi:defcfun ("_wrap_Fl_Widget_callback__SWIG_4" Fl_Widget_callback) :void
  (self :pointer)
  (cb :pointer)
  (p :long))

(cl:export 'Fl_Widget_callback)

(cffi:defcfun ("_wrap_Fl_Widget_user_data__SWIG_0" Fl_Widget_user_data) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_user_data)

(cffi:defcfun ("_wrap_Fl_Widget_user_data__SWIG_1" Fl_Widget_user_data) :void
  (self :pointer)
  (v :pointer))

(cl:export 'Fl_Widget_user_data)

(cffi:defcfun ("_wrap_Fl_Widget_argument__SWIG_0" Fl_Widget_argument) :long
  (self :pointer))

(cl:export 'Fl_Widget_argument)

(cffi:defcfun ("_wrap_Fl_Widget_argument__SWIG_1" Fl_Widget_argument) :void
  (self :pointer)
  (v :long))

(cl:export 'Fl_Widget_argument)

(cffi:defcfun ("_wrap_Fl_Widget_when__SWIG_0" Fl_Widget_when) Fl_When
  (self :pointer))

(cl:export 'Fl_Widget_when)

(cffi:defcfun ("_wrap_Fl_Widget_when__SWIG_1" Fl_Widget_when) :void
  (self :pointer)
  (i :unsigned-char))

(cl:export 'Fl_Widget_when)

(cffi:defcfun ("_wrap_Fl_Widget_visible" Fl_Widget_visible) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_visible)

(cffi:defcfun ("_wrap_Fl_Widget_visible_r" Fl_Widget_visible_r) :int
  (self :pointer))

(cl:export 'Fl_Widget_visible_r)

(cffi:defcfun ("_wrap_Fl_Widget_show" Fl_Widget_show) :void
  (self :pointer))

(cl:export 'Fl_Widget_show)

(cffi:defcfun ("_wrap_Fl_Widget_hide" Fl_Widget_hide) :void
  (self :pointer))

(cl:export 'Fl_Widget_hide)

(cffi:defcfun ("_wrap_Fl_Widget_set_visible" Fl_Widget_set_visible) :void
  (self :pointer))

(cl:export 'Fl_Widget_set_visible)

(cffi:defcfun ("_wrap_Fl_Widget_clear_visible" Fl_Widget_clear_visible) :void
  (self :pointer))

(cl:export 'Fl_Widget_clear_visible)

(cffi:defcfun ("_wrap_Fl_Widget_active" Fl_Widget_active) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_active)

(cffi:defcfun ("_wrap_Fl_Widget_active_r" Fl_Widget_active_r) :int
  (self :pointer))

(cl:export 'Fl_Widget_active_r)

(cffi:defcfun ("_wrap_Fl_Widget_activate" Fl_Widget_activate) :void
  (self :pointer))

(cl:export 'Fl_Widget_activate)

(cffi:defcfun ("_wrap_Fl_Widget_deactivate" Fl_Widget_deactivate) :void
  (self :pointer))

(cl:export 'Fl_Widget_deactivate)

(cffi:defcfun ("_wrap_Fl_Widget_output" Fl_Widget_output) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_output)

(cffi:defcfun ("_wrap_Fl_Widget_set_output" Fl_Widget_set_output) :void
  (self :pointer))

(cl:export 'Fl_Widget_set_output)

(cffi:defcfun ("_wrap_Fl_Widget_clear_output" Fl_Widget_clear_output) :void
  (self :pointer))

(cl:export 'Fl_Widget_clear_output)

(cffi:defcfun ("_wrap_Fl_Widget_takesevents" Fl_Widget_takesevents) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_takesevents)

(cffi:defcfun ("_wrap_Fl_Widget_changed" Fl_Widget_changed) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_changed)

(cffi:defcfun ("_wrap_Fl_Widget_set_changed" Fl_Widget_set_changed) :void
  (self :pointer))

(cl:export 'Fl_Widget_set_changed)

(cffi:defcfun ("_wrap_Fl_Widget_clear_changed" Fl_Widget_clear_changed) :void
  (self :pointer))

(cl:export 'Fl_Widget_clear_changed)

(cffi:defcfun ("_wrap_Fl_Widget_simple_keyboard" Fl_Widget_simple_keyboard) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_simple_keyboard)

(cffi:defcfun ("_wrap_Fl_Widget_set_simple_keyboard" Fl_Widget_set_simple_keyboard) :void
  (self :pointer))

(cl:export 'Fl_Widget_set_simple_keyboard)

(cffi:defcfun ("_wrap_Fl_Widget_set_normal_keyboard" Fl_Widget_set_normal_keyboard) :void
  (self :pointer))

(cl:export 'Fl_Widget_set_normal_keyboard)

(cffi:defcfun ("_wrap_Fl_Widget_take_focus" Fl_Widget_take_focus) :int
  (self :pointer))

(cl:export 'Fl_Widget_take_focus)

(cffi:defcfun ("_wrap_Fl_Widget_set_visible_focus" Fl_Widget_set_visible_focus) :void
  (self :pointer))

(cl:export 'Fl_Widget_set_visible_focus)

(cffi:defcfun ("_wrap_Fl_Widget_clear_visible_focus" Fl_Widget_clear_visible_focus) :void
  (self :pointer))

(cl:export 'Fl_Widget_clear_visible_focus)

(cffi:defcfun ("_wrap_Fl_Widget_visible_focus__SWIG_0" Fl_Widget_visible_focus) :void
  (self :pointer)
  (v :int))

(cl:export 'Fl_Widget_visible_focus)

(cffi:defcfun ("_wrap_Fl_Widget_visible_focus__SWIG_1" Fl_Widget_visible_focus) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_visible_focus)

(cffi:defcfun ("_wrap_Fl_Widget_default_callback" Fl_Widget_default_callback) :void
  (cb :pointer)
  (d :pointer))

(cl:export 'Fl_Widget_default_callback)

(cffi:defcfun ("_wrap_Fl_Widget_do_callback__SWIG_0" Fl_Widget_do_callback) :void
  (self :pointer))

(cl:export 'Fl_Widget_do_callback)

(cffi:defcfun ("_wrap_Fl_Widget_do_callback__SWIG_1" Fl_Widget_do_callback) :void
  (self :pointer)
  (o :pointer)
  (arg :long))

(cl:export 'Fl_Widget_do_callback)

(cffi:defcfun ("_wrap_Fl_Widget_do_callback__SWIG_2" Fl_Widget_do_callback) :void
  (self :pointer)
  (o :pointer)
  (arg :pointer))

(cl:export 'Fl_Widget_do_callback)

(cffi:defcfun ("_wrap_Fl_Widget_test_shortcut__SWIG_0" Fl_Widget_test_shortcut) :int
  (self :pointer))

(cl:export 'Fl_Widget_test_shortcut)

(cffi:defcfun ("_wrap_Fl_Widget_label_shortcut" Fl_Widget_label_shortcut) :unsigned-int
  (t_arg0 :string))

(cl:export 'Fl_Widget_label_shortcut)

(cffi:defcfun ("_wrap_Fl_Widget_test_shortcut__SWIG_1" Fl_Widget_test_shortcut) :int
  (arg0 :string)
  (require_alt :pointer))

(cl:export 'Fl_Widget_test_shortcut)

(cffi:defcfun ("_wrap_Fl_Widget__set_fullscreen" Fl_Widget__set_fullscreen) :void
  (self :pointer))

(cl:export 'Fl_Widget__set_fullscreen)

(cffi:defcfun ("_wrap_Fl_Widget__clear_fullscreen" Fl_Widget__clear_fullscreen) :void
  (self :pointer))

(cl:export 'Fl_Widget__clear_fullscreen)

(cffi:defcfun ("_wrap_Fl_Widget_contains" Fl_Widget_contains) :int
  (self :pointer)
  (w :pointer))

(cl:export 'Fl_Widget_contains)

(cffi:defcfun ("_wrap_Fl_Widget_inside" Fl_Widget_inside) :int
  (self :pointer)
  (wgt :pointer))

(cl:export 'Fl_Widget_inside)

(cffi:defcfun ("_wrap_Fl_Widget_redraw" Fl_Widget_redraw) :void
  (self :pointer))

(cl:export 'Fl_Widget_redraw)

(cffi:defcfun ("_wrap_Fl_Widget_redraw_label" Fl_Widget_redraw_label) :void
  (self :pointer))

(cl:export 'Fl_Widget_redraw_label)

(cffi:defcfun ("_wrap_Fl_Widget_damage__SWIG_0" Fl_Widget_damage) :unsigned-char
  (self :pointer))

(cl:export 'Fl_Widget_damage)

(cffi:defcfun ("_wrap_Fl_Widget_clear_damage" Fl_Widget_clear_damage) :void
  (self :pointer)
  (c :unsigned-char))

(cl:export 'Fl_Widget_clear_damage)

(cffi:defcfun ("_wrap_Fl_Widget_damage__SWIG_1" Fl_Widget_damage) :void
  (self :pointer)
  (c :unsigned-char))

(cl:export 'Fl_Widget_damage)

(cffi:defcfun ("_wrap_Fl_Widget_damage__SWIG_2" Fl_Widget_damage) :void
  (self :pointer)
  (c :unsigned-char)
  (x :int)
  (y :int)
  (w :int)
  (h :int))

(cl:export 'Fl_Widget_damage)

(cffi:defcfun ("_wrap_Fl_Widget_draw_label" Fl_Widget_draw_label) :void
  (self :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int))

(cl:export 'Fl_Widget_draw_label)

(cffi:defcfun ("_wrap_Fl_Widget_measure_label" Fl_Widget_measure_label) :void
  (self :pointer)
  (ww :pointer)
  (hh :pointer))

(cl:export 'Fl_Widget_measure_label)

(cffi:defcfun ("_wrap_Fl_Widget_window" Fl_Widget_window) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_window)

(cffi:defcfun ("_wrap_Fl_Widget_as_group" Fl_Widget_as_group) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_as_group)

(cffi:defcfun ("_wrap_Fl_Widget_as_window" Fl_Widget_as_window) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_as_window)

(cffi:defcfun ("_wrap_Fl_Widget_as_gl_window" Fl_Widget_as_gl_window) :pointer
  (self :pointer))

(cl:export 'Fl_Widget_as_gl_window)

(cffi:defcfun ("_wrap_Fl_Widget_color2__SWIG_0" Fl_Widget_color2) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Widget_color2)

(cffi:defcfun ("_wrap_Fl_Widget_color2__SWIG_1" Fl_Widget_color2) :void
  (self :pointer)
  (a :unsigned-int))

(cl:export 'Fl_Widget_color2)

(cl:defconstant FL_RESERVED_TYPE 100)

(cl:export 'FL_RESERVED_TYPE)

(cffi:defcfun ("_wrap_Fl_Group_handle" Fl_Group_handle) :int
  (self :pointer)
  (arg1 :int))

(cl:export 'Fl_Group_handle)

(cffi:defcfun ("_wrap_Fl_Group_begin" Fl_Group_begin) :void
  (self :pointer))

(cl:export 'Fl_Group_begin)

(cffi:defcfun ("_wrap_Fl_Group_end" Fl_Group_end) :void
  (self :pointer))

(cl:export 'Fl_Group_end)

(cffi:defcfun ("_wrap_Fl_Group_current__SWIG_0" Fl_Group_current) :pointer)

(cl:export 'Fl_Group_current)

(cffi:defcfun ("_wrap_Fl_Group_current__SWIG_1" Fl_Group_current) :void
  (g :pointer))

(cl:export 'Fl_Group_current)

(cffi:defcfun ("_wrap_Fl_Group_children" Fl_Group_children) :int
  (self :pointer))

(cl:export 'Fl_Group_children)

(cffi:defcfun ("_wrap_Fl_Group_child" Fl_Group_child) :pointer
  (self :pointer)
  (n :int))

(cl:export 'Fl_Group_child)

(cffi:defcfun ("_wrap_Fl_Group_find" Fl_Group_find) :int
  (self :pointer)
  (o :pointer))

(cl:export 'Fl_Group_find)

(cffi:defcfun ("_wrap_Fl_Group_resize" Fl_Group_resize) :void
  (self :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int))

(cl:export 'Fl_Group_resize)

(cffi:defcfun ("_wrap_new_Fl_Group" new_Fl_Group) :pointer
  (arg0 :int)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :string))

(cl:export 'new_Fl_Group)

(cffi:defcfun ("_wrap_delete_Fl_Group" delete_Fl_Group) :void
  (self :pointer))

(cl:export 'delete_Fl_Group)

(cffi:defcfun ("_wrap_Fl_Group_add" Fl_Group_add) :void
  (self :pointer)
  (o :pointer))

(cl:export 'Fl_Group_add)

(cffi:defcfun ("_wrap_Fl_Group_insert" Fl_Group_insert) :void
  (self :pointer)
  (arg1 :pointer)
  (i :int))

(cl:export 'Fl_Group_insert)

(cffi:defcfun ("_wrap_Fl_Group_insert_before" Fl_Group_insert_before) :void
  (self :pointer)
  (o :pointer)
  (before :pointer))

(cl:export 'Fl_Group_insert_before)

(cffi:defcfun ("_wrap_Fl_Group_remove__SWIG_0" Fl_Group_remove) :void
  (self :pointer)
  (index :int))

(cl:export 'Fl_Group_remove)

(cffi:defcfun ("_wrap_Fl_Group_remove__SWIG_1" Fl_Group_remove) :void
  (self :pointer)
  (o :pointer))

(cl:export 'Fl_Group_remove)

(cffi:defcfun ("_wrap_Fl_Group_clear" Fl_Group_clear) :void
  (self :pointer))

(cl:export 'Fl_Group_clear)

(cffi:defcfun ("_wrap_Fl_Group_resizable__SWIG_0" Fl_Group_resizable) :void
  (self :pointer)
  (o :pointer))

(cl:export 'Fl_Group_resizable)

(cffi:defcfun ("_wrap_Fl_Group_resizable__SWIG_1" Fl_Group_resizable) :pointer
  (self :pointer))

(cl:export 'Fl_Group_resizable)

(cffi:defcfun ("_wrap_Fl_Group_add_resizable" Fl_Group_add_resizable) :void
  (self :pointer)
  (o :pointer))

(cl:export 'Fl_Group_add_resizable)

(cffi:defcfun ("_wrap_Fl_Group_init_sizes" Fl_Group_init_sizes) :void
  (self :pointer))

(cl:export 'Fl_Group_init_sizes)

(cffi:defcfun ("_wrap_Fl_Group_clip_children__SWIG_0" Fl_Group_clip_children) :void
  (self :pointer)
  (c :int))

(cl:export 'Fl_Group_clip_children)

(cffi:defcfun ("_wrap_Fl_Group_clip_children__SWIG_1" Fl_Group_clip_children) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Group_clip_children)

(cffi:defcfun ("_wrap_Fl_Group_as_group" Fl_Group_as_group) :pointer
  (self :pointer))

(cl:export 'Fl_Group_as_group)

(cffi:defcfun ("_wrap_Fl_Group_focus" Fl_Group_focus) :void
  (self :pointer)
  (W :pointer))

(cl:export 'Fl_Group_focus)

(cffi:defcfun ("_wrap_Fl_Group__ddfdesign_kludge" Fl_Group__ddfdesign_kludge) :pointer
  (self :pointer))

(cl:export 'Fl_Group__ddfdesign_kludge)

(cffi:defcfun ("_wrap_Fl_Group_forms_end" Fl_Group_forms_end) :void
  (self :pointer))

(cl:export 'Fl_Group_forms_end)

(cffi:defcfun ("_wrap_new_Fl_End" new_Fl_End) :pointer)

(cl:export 'new_Fl_End)

(cffi:defcfun ("_wrap_delete_Fl_End" delete_Fl_End) :void
  (self :pointer))

(cl:defconstant FL_WINDOW #xF0)

(cl:export 'FL_WINDOW)

(cl:defconstant FL_DOUBLE_WINDOW #xF1)

(cl:export 'FL_DOUBLE_WINDOW)

(cffi:defcfun ("_wrap_new_Fl_Window_3" new_Fl_Window_3) :pointer
  (w :int)
  (h :int)
  (title :string))

(cl:export 'new_Fl_Window_3)

(cffi:defcfun ("_wrap_new_Fl_Window_5" new_Fl_Window_5) :pointer
  (x :int)
  (y :int)
  (w :int)
  (h :int)
  (title :string))

(cl:export 'new_Fl_Window_5)

(cffi:defcfun ("_wrap_delete_Fl_Window" delete_Fl_Window) :void
  (self :pointer))

(cl:export 'delete_Fl_Window)

(cffi:defcfun ("_wrap_Fl_Window_handle" Fl_Window_handle) :int
  (self :pointer)
  (arg1 :int))

(cl:export 'Fl_Window_handle)

(cffi:defcfun ("_wrap_Fl_Window_resize" Fl_Window_resize) :void
  (self :pointer)
  (X :int)
  (Y :int)
  (W :int)
  (H :int))

(cl:export 'Fl_Window_resize)

(cffi:defcfun ("_wrap_Fl_Window_border__SWIG_0" Fl_Window_border) :void
  (self :pointer)
  (b :int))

(cl:export 'Fl_Window_border)

(cffi:defcfun ("_wrap_Fl_Window_clear_border" Fl_Window_clear_border) :void
  (self :pointer))

(cl:export 'Fl_Window_clear_border)

(cffi:defcfun ("_wrap_Fl_Window_border__SWIG_1" Fl_Window_border) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Window_border)

(cffi:defcfun ("_wrap_Fl_Window_set_override" Fl_Window_set_override) :void
  (self :pointer))

(cl:export 'Fl_Window_set_override)

(cffi:defcfun ("_wrap_Fl_Window_override" Fl_Window_override) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Window_override)

(cffi:defcfun ("_wrap_Fl_Window_set_modal" Fl_Window_set_modal) :void
  (self :pointer))

(cl:export 'Fl_Window_set_modal)

(cffi:defcfun ("_wrap_Fl_Window_modal" Fl_Window_modal) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Window_modal)

(cffi:defcfun ("_wrap_Fl_Window_set_non_modal" Fl_Window_set_non_modal) :void
  (self :pointer))

(cl:export 'Fl_Window_set_non_modal)

(cffi:defcfun ("_wrap_Fl_Window_non_modal" Fl_Window_non_modal) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Window_non_modal)

(cffi:defcfun ("_wrap_Fl_Window_set_menu_window" Fl_Window_set_menu_window) :void
  (self :pointer))

(cl:export 'Fl_Window_set_menu_window)

(cffi:defcfun ("_wrap_Fl_Window_menu_window" Fl_Window_menu_window) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Window_menu_window)

(cffi:defcfun ("_wrap_Fl_Window_set_tooltip_window" Fl_Window_set_tooltip_window) :void
  (self :pointer))

(cl:export 'Fl_Window_set_tooltip_window)

(cffi:defcfun ("_wrap_Fl_Window_tooltip_window" Fl_Window_tooltip_window) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Window_tooltip_window)

(cffi:defcfun ("_wrap_Fl_Window_hotspot__SWIG_0" Fl_Window_hotspot) :void
  (self :pointer)
  (x :int)
  (y :int)
  (offscreen :int))

(cl:export 'Fl_Window_hotspot)

(cffi:defcfun ("_wrap_Fl_Window_hotspot__SWIG_1" Fl_Window_hotspot) :void
  (self :pointer)
  (arg1 :pointer)
  (offscreen :int))

(cl:export 'Fl_Window_hotspot)

(cffi:defcfun ("_wrap_Fl_Window_free_position" Fl_Window_free_position) :void
  (self :pointer))

(cl:export 'Fl_Window_free_position)

(cffi:defcfun ("_wrap_Fl_Window_size_range" Fl_Window_size_range) :void
  (self :pointer)
  (minw :int)
  (minh :int)
  (maxw :int)
  (maxh :int)
  (dw :int)
  (dh :int)
  (aspect :int))

(cl:export 'Fl_Window_size_range)

(cffi:defcfun ("_wrap_Fl_Window_label__SWIG_0" Fl_Window_label) :string
  (self :pointer))

(cl:export 'Fl_Window_label)

(cffi:defcfun ("_wrap_Fl_Window_iconlabel__SWIG_0" Fl_Window_iconlabel) :string
  (self :pointer))

(cl:export 'Fl_Window_iconlabel)

(cffi:defcfun ("_wrap_Fl_Window_label__SWIG_1" Fl_Window_label) :void
  (self :pointer)
  (arg1 :string))

(cl:export 'Fl_Window_label)

(cffi:defcfun ("_wrap_Fl_Window_iconlabel__SWIG_1" Fl_Window_iconlabel) :void
  (self :pointer)
  (arg1 :string))

(cl:export 'Fl_Window_iconlabel)

(cffi:defcfun ("_wrap_Fl_Window_label__SWIG_2" Fl_Window_label) :void
  (self :pointer)
  (label :string)
  (iconlabel :string))

(cl:export 'Fl_Window_label)

(cffi:defcfun ("_wrap_Fl_Window_copy_label" Fl_Window_copy_label) :void
  (self :pointer)
  (a :string))

(cl:export 'Fl_Window_copy_label)

(cffi:defcfun ("_wrap_Fl_Window_default_xclass__SWIG_0" Fl_Window_default_xclass) :void
  (arg0 :string))

(cl:export 'Fl_Window_default_xclass)

(cffi:defcfun ("_wrap_Fl_Window_default_xclass__SWIG_1" Fl_Window_default_xclass) :string)

(cl:export 'Fl_Window_default_xclass)

(cffi:defcfun ("_wrap_Fl_Window_xclass__SWIG_0" Fl_Window_xclass) :string
  (self :pointer))

(cl:export 'Fl_Window_xclass)

(cffi:defcfun ("_wrap_Fl_Window_xclass__SWIG_1" Fl_Window_xclass) :void
  (self :pointer)
  (c :string))

(cl:export 'Fl_Window_xclass)

(cffi:defcfun ("_wrap_Fl_Window_default_icon" Fl_Window_default_icon) :void
  (arg0 :pointer))

(cl:export 'Fl_Window_default_icon)

(cffi:defcfun ("_wrap_Fl_Window_default_icons" Fl_Window_default_icons) :void
  (arg0 :pointer)
  (arg1 :int))

(cl:export 'Fl_Window_default_icons)

(cffi:defcfun ("_wrap_Fl_Window_icon__SWIG_0" Fl_Window_icon) :void
  (self :pointer)
  (arg1 :pointer))

(cl:export 'Fl_Window_icon)

(cffi:defcfun ("_wrap_Fl_Window_icons" Fl_Window_icons) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export 'Fl_Window_icons)

(cffi:defcfun ("_wrap_Fl_Window_icon__SWIG_1" Fl_Window_icon) :pointer
  (self :pointer))

(cl:export 'Fl_Window_icon)

(cffi:defcfun ("_wrap_Fl_Window_icon__SWIG_2" Fl_Window_icon) :void
  (self :pointer)
  (ic :pointer))

(cl:export 'Fl_Window_icon)

(cffi:defcfun ("_wrap_Fl_Window_shown" Fl_Window_shown) :int
  (self :pointer))

(cl:export 'Fl_Window_shown)

(cffi:defcfun ("_wrap_Fl_Window_show" Fl_Window_show) :void
  (self :pointer))

(cl:export 'Fl_Window_show)

(cffi:defcfun ("_wrap_Fl_Window_hide" Fl_Window_hide) :void
  (self :pointer))

(cl:export 'Fl_Window_hide)

(cffi:defcfun ("_wrap_Fl_Window_fullscreen" Fl_Window_fullscreen) :void
  (self :pointer))

(cl:export 'Fl_Window_fullscreen)

(cffi:defcfun ("_wrap_Fl_Window_fullscreen_off__SWIG_0" Fl_Window_fullscreen_off) :void
  (self :pointer))

(cl:export 'Fl_Window_fullscreen_off)

(cffi:defcfun ("_wrap_Fl_Window_fullscreen_off__SWIG_1" Fl_Window_fullscreen_off) :void
  (self :pointer)
  (X :int)
  (Y :int)
  (W :int)
  (H :int))

(cl:export 'Fl_Window_fullscreen_off)

(cffi:defcfun ("_wrap_Fl_Window_fullscreen_active" Fl_Window_fullscreen_active) :unsigned-int
  (self :pointer))

(cl:export 'Fl_Window_fullscreen_active)

(cffi:defcfun ("_wrap_Fl_Window_fullscreen_screens" Fl_Window_fullscreen_screens) :void
  (self :pointer)
  (top :int)
  (bottom :int)
  (left :int)
  (right :int))

(cl:export 'Fl_Window_fullscreen_screens)

(cffi:defcfun ("_wrap_Fl_Window_iconize" Fl_Window_iconize) :void
  (self :pointer))

(cl:export 'Fl_Window_iconize)

(cffi:defcfun ("_wrap_Fl_Window_x_root" Fl_Window_x_root) :int
  (self :pointer))

(cl:export 'Fl_Window_x_root)

(cffi:defcfun ("_wrap_Fl_Window_y_root" Fl_Window_y_root) :int
  (self :pointer))

(cl:export 'Fl_Window_y_root)

(cffi:defcfun ("_wrap_Fl_Window_current" Fl_Window_current) :pointer)

(cl:export 'Fl_Window_current)

(cffi:defcfun ("_wrap_Fl_Window_make_current" Fl_Window_make_current) :void
  (self :pointer))

(cl:export 'Fl_Window_make_current)

(cffi:defcfun ("_wrap_Fl_Window_as_window" Fl_Window_as_window) :pointer
  (self :pointer))

(cl:export 'Fl_Window_as_window)

(cffi:defcfun ("_wrap_Fl_Window_cursor__SWIG_0" Fl_Window_cursor) :void
  (self :pointer)
  (c Fl_Cursor)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int))

(cl:export 'Fl_Window_cursor)

(cffi:defcfun ("_wrap_Fl_Window_cursor__SWIG_1" Fl_Window_cursor) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int))

(cl:export 'Fl_Window_cursor)

(cffi:defcfun ("_wrap_Fl_Window_default_cursor" Fl_Window_default_cursor) :void
  (self :pointer)
  (c Fl_Cursor)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int))

(cl:export 'Fl_Window_default_cursor)

(cffi:defcfun ("_wrap_Fl_Window_default_callback" Fl_Window_default_callback) :void
  (arg0 :pointer)
  (v :pointer))

(cl:export 'Fl_Window_default_callback)

(cffi:defcfun ("_wrap_Fl_Window_decorated_w" Fl_Window_decorated_w) :int
  (self :pointer))

(cl:export 'Fl_Window_decorated_w)

(cffi:defcfun ("_wrap_Fl_Window_decorated_h" Fl_Window_decorated_h) :int
  (self :pointer))

(cl:export 'Fl_Window_decorated_h)


