/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>


#include "FL/Fl_Export.H"


#include <stdint.h>		// Use the C99 official header


#include "FL/Enumerations.H"

EXPORT Fl_Boxtype _wrap_fl_define_FL_ROUND_UP_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_ROUND_UP_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_define_FL_SHADOW_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_SHADOW_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_define_FL_ROUNDED_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_ROUNDED_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_define_FL_RFLAT_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_RFLAT_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_define_FL_RSHADOW_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_RSHADOW_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_define_FL_DIAMOND_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_DIAMOND_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_define_FL_OVAL_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_OVAL_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_define_FL_PLASTIC_UP_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_PLASTIC_UP_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_define_FL_GTK_UP_BOX () {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype result;
  
  try {
    result = (Fl_Boxtype)fl_define_FL_GTK_UP_BOX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_box (Fl_Boxtype larg1) {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype arg1 ;
  Fl_Boxtype result;
  
  arg1 = larg1;
  try {
    result = (Fl_Boxtype)fl_box(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_down (Fl_Boxtype larg1) {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype arg1 ;
  Fl_Boxtype result;
  
  arg1 = larg1;
  try {
    result = (Fl_Boxtype)fl_down(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Boxtype _wrap_fl_frame (Fl_Boxtype larg1) {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Boxtype arg1 ;
  Fl_Boxtype result;
  
  arg1 = larg1;
  try {
    result = (Fl_Boxtype)fl_frame(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT Fl_Labeltype _wrap_fl_define_FL_SHADOW_LABEL () {
  Fl_Labeltype lresult = (Fl_Labeltype)0 ;
  Fl_Labeltype result;
  
  try {
    result = (Fl_Labeltype)fl_define_FL_SHADOW_LABEL();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Labeltype)0;
  }
}


EXPORT Fl_Labeltype _wrap_fl_define_FL_ENGRAVED_LABEL () {
  Fl_Labeltype lresult = (Fl_Labeltype)0 ;
  Fl_Labeltype result;
  
  try {
    result = (Fl_Labeltype)fl_define_FL_ENGRAVED_LABEL();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Labeltype)0;
  }
}


EXPORT Fl_Labeltype _wrap_fl_define_FL_EMBOSSED_LABEL () {
  Fl_Labeltype lresult = (Fl_Labeltype)0 ;
  Fl_Labeltype result;
  
  try {
    result = (Fl_Labeltype)fl_define_FL_EMBOSSED_LABEL();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Labeltype)0;
  }
}


EXPORT Fl_Color _wrap_fl_inactive (Fl_Color larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Color arg1 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)fl_inactive(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT Fl_Color _wrap_fl_contrast (Fl_Color larg1, Fl_Color larg2) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Color arg1 ;
  Fl_Color arg2 ;
  Fl_Color result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Fl_Color)fl_contrast(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT Fl_Color _wrap_fl_color_average (Fl_Color larg1, Fl_Color larg2, float larg3) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Color arg1 ;
  Fl_Color arg2 ;
  float arg3 ;
  Fl_Color result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Fl_Color)fl_color_average(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT Fl_Color _wrap_fl_lighter (Fl_Color larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Color arg1 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)fl_lighter(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT Fl_Color _wrap_fl_darker (Fl_Color larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Color arg1 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)fl_darker(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT Fl_Color _wrap_fl_rgb_color__SWIG_0 (uchar larg1, uchar larg2, uchar larg3) {
  Fl_Color lresult = (Fl_Color)0 ;
  uchar arg1 ;
  uchar arg2 ;
  uchar arg3 ;
  Fl_Color result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Fl_Color)fl_rgb_color(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT Fl_Color _wrap_fl_rgb_color__SWIG_1 (uchar larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  uchar arg1 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)fl_rgb_color(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT Fl_Color _wrap_fl_gray_ramp (int larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  int arg1 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)fl_gray_ramp(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT Fl_Color _wrap_fl_color_cube (int larg1, int larg2, int larg3) {
  Fl_Color lresult = (Fl_Color)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Fl_Color result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Fl_Color)fl_color_cube(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}



#include "FL/Fl.H"

EXPORT void _wrap_Fl_call_screen_init () {
  try {
    Fl::call_screen_init();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_damage__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    Fl::damage(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_option__SWIG_0 (Fl::Fl_Option larg1) {
  int lresult = (int)0 ;
  Fl::Fl_Option arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)Fl::option(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_option__SWIG_1 (Fl::Fl_Option larg1, int larg2) {
  Fl::Fl_Option arg1 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    Fl::option(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_add_awake_handler_ (Fl_Awake_Handler larg1, void *larg2) {
  int lresult = (int)0 ;
  Fl_Awake_Handler arg1 = (Fl_Awake_Handler) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)Fl::add_awake_handler_(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT double _wrap_Fl_version () {
  double lresult = (double)0 ;
  double result;
  
  try {
    result = (double)Fl::version();
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT int _wrap_Fl_arg (int larg1, char **larg2, int *larg3) {
  int lresult = (int)0 ;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)Fl::arg(arg1,arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_args__SWIG_0 (int larg1, char **larg2, int *larg3, Fl_Args_Handler larg4) {
  int lresult = (int)0 ;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = 0 ;
  Fl_Args_Handler arg4 = (Fl_Args_Handler) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)Fl::args(arg1,arg2,*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_args__SWIG_1 (int larg1, char **larg2) {
  int arg1 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::args(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_display (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::display((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_visual (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::visual(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_own_colormap () {
  try {
    Fl::own_colormap();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_get_system_colors () {
  try {
    Fl::get_system_colors();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_foreground (uchar larg1, uchar larg2, uchar larg3) {
  uchar arg1 ;
  uchar arg2 ;
  uchar arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Fl::foreground(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_background (uchar larg1, uchar larg2, uchar larg3) {
  uchar arg1 ;
  uchar arg2 ;
  uchar arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Fl::background(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_background2 (uchar larg1, uchar larg2, uchar larg3) {
  uchar arg1 ;
  uchar arg2 ;
  uchar arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Fl::background2(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_scheme__SWIG_0 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::scheme((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Fl_scheme__SWIG_1 () {
  char * lresult = (char *)0 ;
  char *result = 0 ;
  
  try {
    result = (char *)Fl::scheme();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Fl_reload_scheme () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::reload_scheme();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_scrollbar_size__SWIG_0 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::scrollbar_size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_scrollbar_size__SWIG_1 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    Fl::scrollbar_size(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_wait__SWIG_0 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::wait();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT double _wrap_Fl_wait__SWIG_1 (double larg1) {
  double lresult = (double)0 ;
  double arg1 ;
  double result;
  
  arg1 = larg1;
  try {
    result = (double)Fl::wait(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT int _wrap_Fl_check () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::check();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_ready () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::ready();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_run () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::run();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Fl_Widget *_wrap_Fl_readqueue () {
  Fl_Widget * lresult = (Fl_Widget *)0 ;
  Fl_Widget *result = 0 ;
  
  try {
    result = (Fl_Widget *)Fl::readqueue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget *)0;
  }
}


EXPORT int _wrap_Fl_has_timeout (Fl_Timeout_Handler larg1, void *larg2) {
  int lresult = (int)0 ;
  Fl_Timeout_Handler arg1 = (Fl_Timeout_Handler) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)Fl::has_timeout(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_add_idle (Fl_Idle_Handler larg1, void *larg2) {
  Fl_Idle_Handler arg1 = (Fl_Idle_Handler) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::add_idle(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_has_idle (Fl_Idle_Handler larg1, void *larg2) {
  int lresult = (int)0 ;
  Fl_Idle_Handler arg1 = (Fl_Idle_Handler) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)Fl::has_idle(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_remove_idle (Fl_Idle_Handler larg1, void *larg2) {
  Fl_Idle_Handler arg1 = (Fl_Idle_Handler) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::remove_idle(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_damage__SWIG_1 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::damage();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_redraw () {
  try {
    Fl::redraw();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_flush () {
  try {
    Fl::flush();
    
  } catch (...) {
    
  }
}


EXPORT Fl_Window *_wrap_Fl_first_window__SWIG_0 () {
  Fl_Window * lresult = (Fl_Window *)0 ;
  Fl_Window *result = 0 ;
  
  try {
    result = (Fl_Window *)Fl::first_window();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT void _wrap_Fl_first_window__SWIG_1 (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::first_window(arg1);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Window *_wrap_Fl_next_window (Fl_Window *larg1) {
  Fl_Window * lresult = (Fl_Window *)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  Fl_Window *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Window *)Fl::next_window((Fl_Window const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT Fl_Window *_wrap_Fl_modal () {
  Fl_Window * lresult = (Fl_Window *)0 ;
  Fl_Window *result = 0 ;
  
  try {
    result = (Fl_Window *)Fl::modal();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT Fl_Window *_wrap_Fl_grab__SWIG_0 () {
  Fl_Window * lresult = (Fl_Window *)0 ;
  Fl_Window *result = 0 ;
  
  try {
    result = (Fl_Window *)Fl::grab();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT void _wrap_Fl_grab__SWIG_1 (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::grab(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_event () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_x () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_x();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_y () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_y();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_x_root () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_x_root();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_y_root () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_y_root();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_dx () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_dx();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_dy () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_dy();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_get_mouse (int *larg1, int *larg2) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::get_mouse(*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_event_clicks__SWIG_0 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_clicks();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_event_clicks__SWIG_1 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    Fl::event_clicks(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_event_is_click__SWIG_0 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_is_click();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_event_is_click__SWIG_1 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    Fl::event_is_click(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_event_button () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_button();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_state__SWIG_0 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_state();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_state__SWIG_1 (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::event_state(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_key__SWIG_0 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_key();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_original_key () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_original_key();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_key__SWIG_1 (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::event_key(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_get_key (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::get_key(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_Fl_event_text () {
  char * lresult = (char *)0 ;
  char *result = 0 ;
  
  try {
    result = (char *)Fl::event_text();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Fl_event_length () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_length();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_compose (int *larg1) {
  int lresult = (int)0 ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::compose(*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_compose_reset () {
  try {
    Fl::compose_reset();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_event_inside__SWIG_0 (int larg1, int larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)Fl::event_inside(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_inside__SWIG_1 (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::event_inside((Fl_Widget const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_test_shortcut (Fl_Shortcut *larg1) {
  int lresult = (int)0 ;
  Fl_Shortcut arg1 ;
  int result;
  
  arg1 = *larg1;
  try {
    result = (int)Fl::test_shortcut(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_handle (int larg1, Fl_Window *larg2) {
  int lresult = (int)0 ;
  int arg1 ;
  Fl_Window *arg2 = (Fl_Window *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)Fl::handle(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_handle_ (int larg1, Fl_Window *larg2) {
  int lresult = (int)0 ;
  int arg1 ;
  Fl_Window *arg2 = (Fl_Window *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)Fl::handle_(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Fl_Widget *_wrap_Fl_belowmouse__SWIG_0 () {
  Fl_Widget * lresult = (Fl_Widget *)0 ;
  Fl_Widget *result = 0 ;
  
  try {
    result = (Fl_Widget *)Fl::belowmouse();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget *)0;
  }
}


EXPORT void _wrap_Fl_belowmouse__SWIG_1 (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::belowmouse(arg1);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Widget *_wrap_Fl_pushed__SWIG_0 () {
  Fl_Widget * lresult = (Fl_Widget *)0 ;
  Fl_Widget *result = 0 ;
  
  try {
    result = (Fl_Widget *)Fl::pushed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget *)0;
  }
}


EXPORT void _wrap_Fl_pushed__SWIG_1 (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::pushed(arg1);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Widget *_wrap_Fl_focus__SWIG_0 () {
  Fl_Widget * lresult = (Fl_Widget *)0 ;
  Fl_Widget *result = 0 ;
  
  try {
    result = (Fl_Widget *)Fl::focus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget *)0;
  }
}


EXPORT void _wrap_Fl_focus__SWIG_1 (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::focus(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_event_dispatch__SWIG_0 (Fl_Event_Dispatch larg1) {
  Fl_Event_Dispatch arg1 = (Fl_Event_Dispatch) 0 ;
  
  arg1 = larg1;
  try {
    Fl::event_dispatch(arg1);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Event_Dispatch _wrap_Fl_event_dispatch__SWIG_1 () {
  Fl_Event_Dispatch lresult = (Fl_Event_Dispatch)0 ;
  Fl_Event_Dispatch result;
  
  try {
    result = (Fl_Event_Dispatch)Fl::event_dispatch();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Event_Dispatch)0;
  }
}


EXPORT void _wrap_Fl_copy (char *larg1, int larg2, int larg3) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 = (int) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Fl::copy((char const *)arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_paste__SWIG_0 (Fl_Widget *larg1, int larg2) {
  Fl_Widget *arg1 = 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::paste(*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_add_clipboard_notify (Fl_Clipboard_Notify_Handler larg1, void *larg2) {
  Fl_Clipboard_Notify_Handler arg1 = (Fl_Clipboard_Notify_Handler) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::add_clipboard_notify(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_remove_clipboard_notify (Fl_Clipboard_Notify_Handler larg1) {
  Fl_Clipboard_Notify_Handler arg1 = (Fl_Clipboard_Notify_Handler) 0 ;
  
  arg1 = larg1;
  try {
    Fl::remove_clipboard_notify(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_dnd () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::dnd();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Fl_Widget *_wrap_Fl_selection_owner__SWIG_0 () {
  Fl_Widget * lresult = (Fl_Widget *)0 ;
  Fl_Widget *result = 0 ;
  
  try {
    result = (Fl_Widget *)Fl::selection_owner();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget *)0;
  }
}


EXPORT void _wrap_Fl_selection_owner__SWIG_1 (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::selection_owner(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_selection (Fl_Widget *larg1, char *larg2, int larg3) {
  Fl_Widget *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Fl::selection(*arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_paste__SWIG_1 (Fl_Widget *larg1) {
  Fl_Widget *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    Fl::paste(*arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_x () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::x();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_y () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::y();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_w () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::w();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_h () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::h();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_screen_count () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::screen_count();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_screen_xywh__SWIG_0 (int *larg1, int *larg2, int *larg3, int *larg4) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    Fl::screen_xywh(*arg1,*arg2,*arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_screen_xywh__SWIG_1 (int *larg1, int *larg2, int *larg3, int *larg4, int larg5, int larg6) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    Fl::screen_xywh(*arg1,*arg2,*arg3,*arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_screen_xywh__SWIG_2 (int *larg1, int *larg2, int *larg3, int *larg4, int larg5) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    Fl::screen_xywh(*arg1,*arg2,*arg3,*arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_screen_xywh__SWIG_3 (int *larg1, int *larg2, int *larg3, int *larg4, int larg5, int larg6, int larg7, int larg8) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    Fl::screen_xywh(*arg1,*arg2,*arg3,*arg4,arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_screen_num__SWIG_0 (int larg1, int larg2) {
  int lresult = (int)0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)Fl::screen_num(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_screen_num__SWIG_1 (int larg1, int larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)Fl::screen_num(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_screen_dpi (float *larg1, float *larg2, int larg3) {
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  int arg3 = (int) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Fl::screen_dpi(*arg1,*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_screen_work_area__SWIG_0 (int *larg1, int *larg2, int *larg3, int *larg4, int larg5, int larg6) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    Fl::screen_work_area(*arg1,*arg2,*arg3,*arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_screen_work_area__SWIG_1 (int *larg1, int *larg2, int *larg3, int *larg4, int larg5) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    Fl::screen_work_area(*arg1,*arg2,*arg3,*arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_screen_work_area__SWIG_2 (int *larg1, int *larg2, int *larg3, int *larg4) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    Fl::screen_work_area(*arg1,*arg2,*arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_set_color__SWIG_0 (Fl_Color larg1, uchar larg2, uchar larg3, uchar larg4) {
  Fl_Color arg1 ;
  uchar arg2 ;
  uchar arg3 ;
  uchar arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    Fl::set_color(arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_set_color__SWIG_1 (Fl_Color larg1, unsigned int larg2) {
  Fl_Color arg1 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::set_color(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_get_color (Fl_Color larg1, uchar *larg2, uchar *larg3, uchar *larg4) {
  Fl_Color arg1 ;
  uchar *arg2 = 0 ;
  uchar *arg3 = 0 ;
  uchar *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    Fl::get_color(arg1,*arg2,*arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_free_color (Fl_Color larg1, int larg2) {
  Fl_Color arg1 ;
  int arg2 = (int) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::free_color(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Fl_get_font (Fl_Font larg1) {
  char * lresult = (char *)0 ;
  Fl_Font arg1 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)Fl::get_font(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_Fl_get_font_name (Fl_Font larg1, int *larg2) {
  char * lresult = (char *)0 ;
  Fl_Font arg1 ;
  int *arg2 = (int *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *)Fl::get_font_name(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_Fl_get_font_sizes (Fl_Font larg1, int **larg2) {
  int lresult = (int)0 ;
  Fl_Font arg1 ;
  int **arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)Fl::get_font_sizes(arg1,*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_set_font__SWIG_0 (Fl_Font larg1, char *larg2) {
  Fl_Font arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::set_font(arg1,(char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_set_font__SWIG_1 (Fl_Font larg1, Fl_Font larg2) {
  Fl_Font arg1 ;
  Fl_Font arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::set_font(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Font _wrap_Fl_set_fonts (char *larg1) {
  Fl_Font lresult = (Fl_Font)0 ;
  char *arg1 = (char *) 0 ;
  Fl_Font result;
  
  arg1 = larg1;
  try {
    result = (Fl_Font)Fl::set_fonts((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Font)0;
  }
}


EXPORT void _wrap_Fl_set_labeltype (Fl_Labeltype larg1, Fl_Label_Draw_F *larg2, Fl_Label_Measure_F *larg3) {
  Fl_Labeltype arg1 ;
  Fl_Label_Draw_F *arg2 = (Fl_Label_Draw_F *) 0 ;
  Fl_Label_Measure_F *arg3 = (Fl_Label_Measure_F *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    Fl::set_labeltype(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Box_Draw_F *_wrap_Fl_get_boxtype (Fl_Boxtype larg1) {
  Fl_Box_Draw_F * lresult = (Fl_Box_Draw_F *)0 ;
  Fl_Boxtype arg1 ;
  Fl_Box_Draw_F *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Box_Draw_F *)Fl::get_boxtype(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Box_Draw_F *)0;
  }
}


EXPORT void _wrap_Fl_set_boxtype__SWIG_0 (Fl_Boxtype larg1, Fl_Box_Draw_F *larg2, uchar larg3, uchar larg4, uchar larg5, uchar larg6) {
  Fl_Boxtype arg1 ;
  Fl_Box_Draw_F *arg2 = (Fl_Box_Draw_F *) 0 ;
  uchar arg3 ;
  uchar arg4 ;
  uchar arg5 ;
  uchar arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    Fl::set_boxtype(arg1,arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_set_boxtype__SWIG_1 (Fl_Boxtype larg1, Fl_Boxtype larg2) {
  Fl_Boxtype arg1 ;
  Fl_Boxtype arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::set_boxtype(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_box_dx (Fl_Boxtype larg1) {
  int lresult = (int)0 ;
  Fl_Boxtype arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::box_dx(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_box_dy (Fl_Boxtype larg1) {
  int lresult = (int)0 ;
  Fl_Boxtype arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::box_dy(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_box_dw (Fl_Boxtype larg1) {
  int lresult = (int)0 ;
  Fl_Boxtype arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::box_dw(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_box_dh (Fl_Boxtype larg1) {
  int lresult = (int)0 ;
  Fl_Boxtype arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)Fl::box_dh(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_draw_box_active () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::draw_box_active();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_set_abort (Fl_Abort_Handler larg1) {
  Fl_Abort_Handler arg1 = (Fl_Abort_Handler) 0 ;
  
  arg1 = larg1;
  try {
    Fl::set_abort(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_default_atclose (Fl_Window *larg1, void *larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl::default_atclose(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_set_atclose (Fl_Atclose_Handler larg1) {
  Fl_Atclose_Handler arg1 = (Fl_Atclose_Handler) 0 ;
  
  arg1 = larg1;
  try {
    Fl::set_atclose(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_event_shift () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_shift();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_ctrl () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_ctrl();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_command () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_command();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_alt () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_alt();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_buttons () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_buttons();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_button1 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_button1();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_button2 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_button2();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_event_button3 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::event_button3();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_set_idle (Fl_Old_Idle_Handler larg1) {
  Fl_Old_Idle_Handler arg1 = (Fl_Old_Idle_Handler) 0 ;
  
  arg1 = larg1;
  try {
    Fl::set_idle(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_release () {
  try {
    Fl::release();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_visible_focus__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    Fl::visible_focus(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_visible_focus__SWIG_1 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::visible_focus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_dnd_text_ops__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    Fl::dnd_text_ops(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_dnd_text_ops__SWIG_1 () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::dnd_text_ops();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_lock () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)Fl::lock();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_unlock () {
  try {
    Fl::unlock();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_awake__SWIG_0 (void *larg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::awake(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_awake__SWIG_1 (Fl_Awake_Handler larg1, void *larg2) {
  int lresult = (int)0 ;
  Fl_Awake_Handler arg1 = (Fl_Awake_Handler) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)Fl::awake(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void *_wrap_Fl_thread_message () {
  void * lresult = (void *)0 ;
  void *result = 0 ;
  
  try {
    result = (void *)Fl::thread_message();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_Fl_delete_widget (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::delete_widget(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_do_widget_deletion () {
  try {
    Fl::do_widget_deletion();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_watch_widget_pointer (Fl_Widget **larg1) {
  Fl_Widget **arg1 = 0 ;
  
  arg1 = larg1;
  try {
    Fl::watch_widget_pointer(*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_release_widget_pointer (Fl_Widget **larg1) {
  Fl_Widget **arg1 = 0 ;
  
  arg1 = larg1;
  try {
    Fl::release_widget_pointer(*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_clear_widget_pointer (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    Fl::clear_widget_pointer((Fl_Widget const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_Fl (Fl *larg1) {
  Fl *arg1 = (Fl *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT Fl_Widget_Tracker *_wrap_new_Fl_Widget_Tracker (Fl_Widget *larg1) {
  Fl_Widget_Tracker * lresult = (Fl_Widget_Tracker *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Widget_Tracker *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Widget_Tracker *)new Fl_Widget_Tracker(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget_Tracker *)0;
  }
}


EXPORT void _wrap_delete_Fl_Widget_Tracker (Fl_Widget_Tracker *larg1) {
  Fl_Widget_Tracker *arg1 = (Fl_Widget_Tracker *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT Fl_Widget *_wrap_Fl_Widget_Tracker_widget (Fl_Widget_Tracker *larg1) {
  Fl_Widget * lresult = (Fl_Widget *)0 ;
  Fl_Widget_Tracker *arg1 = (Fl_Widget_Tracker *) 0 ;
  Fl_Widget *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Widget *)(arg1)->widget();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget *)0;
  }
}


EXPORT int _wrap_Fl_Widget_Tracker_deleted (Fl_Widget_Tracker *larg1) {
  int lresult = (int)0 ;
  Fl_Widget_Tracker *arg1 = (Fl_Widget_Tracker *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->deleted();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_Widget_Tracker_exists (Fl_Widget_Tracker *larg1) {
  int lresult = (int)0 ;
  Fl_Widget_Tracker *arg1 = (Fl_Widget_Tracker *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->exists();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}



#include <FL/Fl.H>
#include "FL/Fl_Widget.H"

EXPORT void _wrap_delete_Fl_Widget (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_draw (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->draw();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Widget_handle (Fl_Widget *larg1, int larg2) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->handle(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Fl_Group *_wrap_Fl_Widget_parent__SWIG_0 (Fl_Widget *larg1) {
  Fl_Group * lresult = (Fl_Group *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Group *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Group *)((Fl_Widget const *)arg1)->parent();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Group *)0;
  }
}


EXPORT void _wrap_Fl_Widget_parent__SWIG_1 (Fl_Widget *larg1, Fl_Group *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Group *arg2 = (Fl_Group *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->parent(arg2);
    
  } catch (...) {
    
  }
}


EXPORT uchar _wrap_Fl_Widget_type__SWIG_0 (Fl_Widget *larg1) {
  uchar lresult = (uchar)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  uchar result;
  
  arg1 = larg1;
  try {
    result = (uchar)((Fl_Widget const *)arg1)->type();
    lresult = result;
    return lresult;
  } catch (...) {
    return (uchar)0;
  }
}


EXPORT void _wrap_Fl_Widget_type__SWIG_1 (Fl_Widget *larg1, uchar larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  uchar arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->type(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Widget_x (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Widget const *)arg1)->x();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_Widget_y (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Widget const *)arg1)->y();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_Widget_w (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Widget const *)arg1)->w();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_Widget_h (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Widget const *)arg1)->h();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Widget_resize (Fl_Widget *larg1, int larg2, int larg3, int larg4, int larg5) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->resize(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Widget_damage_resize (Fl_Widget *larg1, int larg2, int larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)(arg1)->damage_resize(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Widget_position (Fl_Widget *larg1, int larg2, int larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->position(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_size (Fl_Widget *larg1, int larg2, int larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->size(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Align _wrap_Fl_Widget_align__SWIG_0 (Fl_Widget *larg1) {
  Fl_Align lresult = (Fl_Align)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Align result;
  
  arg1 = larg1;
  try {
    result = (Fl_Align)((Fl_Widget const *)arg1)->align();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Align)0;
  }
}


EXPORT void _wrap_Fl_Widget_align__SWIG_1 (Fl_Widget *larg1, Fl_Align larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Align arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->align(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Boxtype _wrap_Fl_Widget_box__SWIG_0 (Fl_Widget *larg1) {
  Fl_Boxtype lresult = (Fl_Boxtype)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Boxtype result;
  
  arg1 = larg1;
  try {
    result = (Fl_Boxtype)((Fl_Widget const *)arg1)->box();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Boxtype)0;
  }
}


EXPORT void _wrap_Fl_Widget_box__SWIG_1 (Fl_Widget *larg1, Fl_Boxtype larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Boxtype arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->box(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Color _wrap_Fl_Widget_color__SWIG_0 (Fl_Widget *larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)((Fl_Widget const *)arg1)->color();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT void _wrap_Fl_Widget_color__SWIG_1 (Fl_Widget *larg1, Fl_Color larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Color arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->color(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Color _wrap_Fl_Widget_selection_color__SWIG_0 (Fl_Widget *larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)((Fl_Widget const *)arg1)->selection_color();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT void _wrap_Fl_Widget_selection_color__SWIG_1 (Fl_Widget *larg1, Fl_Color larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Color arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->selection_color(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_color__SWIG_2 (Fl_Widget *larg1, Fl_Color larg2, Fl_Color larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Color arg2 ;
  Fl_Color arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->color(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Fl_Widget_label__SWIG_0 (Fl_Widget *larg1) {
  char * lresult = (char *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Fl_Widget const *)arg1)->label();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Fl_Widget_label__SWIG_1 (Fl_Widget *larg1, char *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->label((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_copy_label (Fl_Widget *larg1, char *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->copy_label((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_label__SWIG_2 (Fl_Widget *larg1, Fl_Labeltype larg2, char *larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Labeltype arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->label(arg2,(char const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Labeltype _wrap_Fl_Widget_labeltype__SWIG_0 (Fl_Widget *larg1) {
  Fl_Labeltype lresult = (Fl_Labeltype)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Labeltype result;
  
  arg1 = larg1;
  try {
    result = (Fl_Labeltype)((Fl_Widget const *)arg1)->labeltype();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Labeltype)0;
  }
}


EXPORT void _wrap_Fl_Widget_labeltype__SWIG_1 (Fl_Widget *larg1, Fl_Labeltype larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Labeltype arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->labeltype(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Color _wrap_Fl_Widget_labelcolor__SWIG_0 (Fl_Widget *larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)((Fl_Widget const *)arg1)->labelcolor();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT void _wrap_Fl_Widget_labelcolor__SWIG_1 (Fl_Widget *larg1, Fl_Color larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Color arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->labelcolor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Font _wrap_Fl_Widget_labelfont__SWIG_0 (Fl_Widget *larg1) {
  Fl_Font lresult = (Fl_Font)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Font result;
  
  arg1 = larg1;
  try {
    result = (Fl_Font)((Fl_Widget const *)arg1)->labelfont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Font)0;
  }
}


EXPORT void _wrap_Fl_Widget_labelfont__SWIG_1 (Fl_Widget *larg1, Fl_Font larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Font arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->labelfont(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Fontsize _wrap_Fl_Widget_labelsize__SWIG_0 (Fl_Widget *larg1) {
  Fl_Fontsize lresult = (Fl_Fontsize)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Fontsize result;
  
  arg1 = larg1;
  try {
    result = (Fl_Fontsize)((Fl_Widget const *)arg1)->labelsize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Fontsize)0;
  }
}


EXPORT void _wrap_Fl_Widget_labelsize__SWIG_1 (Fl_Widget *larg1, Fl_Fontsize larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Fontsize arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->labelsize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Image *_wrap_Fl_Widget_image__SWIG_0 (Fl_Widget *larg1) {
  Fl_Image * lresult = (Fl_Image *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Image *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Image *)(arg1)->image();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Image *)0;
  }
}


EXPORT Fl_Image *_wrap_Fl_Widget_image__SWIG_1 (Fl_Widget *larg1) {
  Fl_Image * lresult = (Fl_Image *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Image *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Image *)((Fl_Widget const *)arg1)->image();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Image *)0;
  }
}


EXPORT void _wrap_Fl_Widget_image__SWIG_2 (Fl_Widget *larg1, Fl_Image *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Image *arg2 = (Fl_Image *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->image(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Image *_wrap_Fl_Widget_deimage__SWIG_0 (Fl_Widget *larg1) {
  Fl_Image * lresult = (Fl_Image *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Image *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Image *)(arg1)->deimage();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Image *)0;
  }
}


EXPORT Fl_Image *_wrap_Fl_Widget_deimage__SWIG_1 (Fl_Widget *larg1) {
  Fl_Image * lresult = (Fl_Image *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Image *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Image *)((Fl_Widget const *)arg1)->deimage();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Image *)0;
  }
}


EXPORT void _wrap_Fl_Widget_deimage__SWIG_2 (Fl_Widget *larg1, Fl_Image *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Image *arg2 = (Fl_Image *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->deimage(arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Fl_Widget_tooltip__SWIG_0 (Fl_Widget *larg1) {
  char * lresult = (char *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Fl_Widget const *)arg1)->tooltip();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Fl_Widget_tooltip__SWIG_1 (Fl_Widget *larg1, char *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->tooltip((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_copy_tooltip (Fl_Widget *larg1, char *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->copy_tooltip((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Callback_p _wrap_Fl_Widget_callback__SWIG_0 (Fl_Widget *larg1) {
  Fl_Callback_p lresult = (Fl_Callback_p)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Callback_p result;
  
  arg1 = larg1;
  try {
    result = (Fl_Callback_p)((Fl_Widget const *)arg1)->callback();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Callback_p)0;
  }
}


EXPORT void _wrap_Fl_Widget_callback__SWIG_1 (Fl_Widget *larg1, Fl_Callback *larg2, void *larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Callback *arg2 = (Fl_Callback *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->callback(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_callback__SWIG_2 (Fl_Widget *larg1, Fl_Callback *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Callback *arg2 = (Fl_Callback *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->callback(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_callback__SWIG_3 (Fl_Widget *larg1, Fl_Callback0 *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Callback0 *arg2 = (Fl_Callback0 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->callback(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_callback__SWIG_4 (Fl_Widget *larg1, Fl_Callback1 *larg2, long larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Callback1 *arg2 = (Fl_Callback1 *) 0 ;
  long arg3 = (long) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->callback(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_Fl_Widget_user_data__SWIG_0 (Fl_Widget *larg1) {
  void * lresult = (void *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((Fl_Widget const *)arg1)->user_data();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_Fl_Widget_user_data__SWIG_1 (Fl_Widget *larg1, void *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->user_data(arg2);
    
  } catch (...) {
    
  }
}


EXPORT long _wrap_Fl_Widget_argument__SWIG_0 (Fl_Widget *larg1) {
  long lresult = (long)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  long result;
  
  arg1 = larg1;
  try {
    result = (long)((Fl_Widget const *)arg1)->argument();
    lresult = result;
    return lresult;
  } catch (...) {
    return (long)0;
  }
}


EXPORT void _wrap_Fl_Widget_argument__SWIG_1 (Fl_Widget *larg1, long larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->argument(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_When _wrap_Fl_Widget_when__SWIG_0 (Fl_Widget *larg1) {
  Fl_When lresult = (Fl_When)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_When result;
  
  arg1 = larg1;
  try {
    result = (Fl_When)((Fl_Widget const *)arg1)->when();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_When)0;
  }
}


EXPORT void _wrap_Fl_Widget_when__SWIG_1 (Fl_Widget *larg1, uchar larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  uchar arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->when(arg2);
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Widget_visible (Fl_Widget *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Widget const *)arg1)->visible();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT int _wrap_Fl_Widget_visible_r (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Widget const *)arg1)->visible_r();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Widget_show (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->show();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_hide (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->hide();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_set_visible (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_visible();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_clear_visible (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear_visible();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Widget_active (Fl_Widget *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Widget const *)arg1)->active();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT int _wrap_Fl_Widget_active_r (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Widget const *)arg1)->active_r();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Widget_activate (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->activate();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_deactivate (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->deactivate();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Widget_output (Fl_Widget *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Widget const *)arg1)->output();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Widget_set_output (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_output();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_clear_output (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear_output();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Widget_takesevents (Fl_Widget *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Widget const *)arg1)->takesevents();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT unsigned int _wrap_Fl_Widget_changed (Fl_Widget *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Widget const *)arg1)->changed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Widget_set_changed (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_changed();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_clear_changed (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear_changed();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Widget_simple_keyboard (Fl_Widget *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Widget const *)arg1)->simple_keyboard();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Widget_set_simple_keyboard (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_simple_keyboard();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_set_normal_keyboard (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_normal_keyboard();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Widget_take_focus (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->take_focus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Widget_set_visible_focus (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_visible_focus();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_clear_visible_focus (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear_visible_focus();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_visible_focus__SWIG_0 (Fl_Widget *larg1, int larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->visible_focus(arg2);
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Widget_visible_focus__SWIG_1 (Fl_Widget *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)(arg1)->visible_focus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Widget_default_callback (Fl_Widget *larg1, void *larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl_Widget::default_callback(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_do_callback__SWIG_0 (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->do_callback();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_do_callback__SWIG_1 (Fl_Widget *larg1, Fl_Widget *larg2, long larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  long arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->do_callback(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_do_callback__SWIG_2 (Fl_Widget *larg1, Fl_Widget *larg2, void *larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->do_callback(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Widget_test_shortcut__SWIG_0 (Fl_Widget *larg1) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->test_shortcut();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT unsigned int _wrap_Fl_Widget_label_shortcut (char *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  char *arg1 = (char *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)Fl_Widget::label_shortcut((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT int _wrap_Fl_Widget_test_shortcut__SWIG_1 (char *larg1, int larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 = (bool) (bool)false ;
  int result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (int)Fl_Widget::test_shortcut((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Widget__set_fullscreen (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->_set_fullscreen();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget__clear_fullscreen (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->_clear_fullscreen();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Widget_contains (Fl_Widget *larg1, Fl_Widget *larg2) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((Fl_Widget const *)arg1)->contains((Fl_Widget const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_Widget_inside (Fl_Widget *larg1, Fl_Widget *larg2) {
  int lresult = (int)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((Fl_Widget const *)arg1)->inside((Fl_Widget const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Widget_redraw (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->redraw();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_redraw_label (Fl_Widget *larg1) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->redraw_label();
    
  } catch (...) {
    
  }
}


EXPORT uchar _wrap_Fl_Widget_damage__SWIG_0 (Fl_Widget *larg1) {
  uchar lresult = (uchar)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  uchar result;
  
  arg1 = larg1;
  try {
    result = (uchar)((Fl_Widget const *)arg1)->damage();
    lresult = result;
    return lresult;
  } catch (...) {
    return (uchar)0;
  }
}


EXPORT void _wrap_Fl_Widget_clear_damage (Fl_Widget *larg1, uchar larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  uchar arg2 = (uchar) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->clear_damage(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_damage__SWIG_1 (Fl_Widget *larg1, uchar larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  uchar arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->damage(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_damage__SWIG_2 (Fl_Widget *larg1, uchar larg2, int larg3, int larg4, int larg5, int larg6) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  uchar arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->damage(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_draw_label (Fl_Widget *larg1, int larg2, int larg3, int larg4, int larg5, Fl_Align larg6) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Fl_Align arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ((Fl_Widget const *)arg1)->draw_label(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Widget_measure_label (Fl_Widget *larg1, int *larg2, int *larg3) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((Fl_Widget const *)arg1)->measure_label(*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Window *_wrap_Fl_Widget_window (Fl_Widget *larg1) {
  Fl_Window * lresult = (Fl_Window *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Window *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Window *)((Fl_Widget const *)arg1)->window();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT Fl_Group *_wrap_Fl_Widget_as_group (Fl_Widget *larg1) {
  Fl_Group * lresult = (Fl_Group *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Group *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Group *)(arg1)->as_group();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Group *)0;
  }
}


EXPORT Fl_Window *_wrap_Fl_Widget_as_window (Fl_Widget *larg1) {
  Fl_Window * lresult = (Fl_Window *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Window *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Window *)(arg1)->as_window();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT Fl_Gl_Window *_wrap_Fl_Widget_as_gl_window (Fl_Widget *larg1) {
  Fl_Gl_Window * lresult = (Fl_Gl_Window *)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Gl_Window *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Gl_Window *)(arg1)->as_gl_window();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Gl_Window *)0;
  }
}


EXPORT Fl_Color _wrap_Fl_Widget_color2__SWIG_0 (Fl_Widget *larg1) {
  Fl_Color lresult = (Fl_Color)0 ;
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  Fl_Color result;
  
  arg1 = larg1;
  try {
    result = (Fl_Color)((Fl_Widget const *)arg1)->color2();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Color)0;
  }
}


EXPORT void _wrap_Fl_Widget_color2__SWIG_1 (Fl_Widget *larg1, unsigned int larg2) {
  Fl_Widget *arg1 = (Fl_Widget *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->color2(arg2);
    
  } catch (...) {
    
  }
}



#include "FL/Fl_Group.H"

EXPORT int _wrap_Fl_Group_handle (Fl_Group *larg1, int larg2) {
  int lresult = (int)0 ;
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->handle(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Group_begin (Fl_Group *larg1) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->begin();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_end (Fl_Group *larg1) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->end();
    
  } catch (...) {
    
  }
}


EXPORT Fl_Group *_wrap_Fl_Group_current__SWIG_0 () {
  Fl_Group * lresult = (Fl_Group *)0 ;
  Fl_Group *result = 0 ;
  
  try {
    result = (Fl_Group *)Fl_Group::current();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Group *)0;
  }
}


EXPORT void _wrap_Fl_Group_current__SWIG_1 (Fl_Group *larg1) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  
  arg1 = larg1;
  try {
    Fl_Group::current(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Group_children (Fl_Group *larg1) {
  int lresult = (int)0 ;
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Group const *)arg1)->children();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Fl_Widget *_wrap_Fl_Group_child (Fl_Group *larg1, int larg2) {
  Fl_Widget * lresult = (Fl_Widget *)0 ;
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  int arg2 ;
  Fl_Widget *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (Fl_Widget *)((Fl_Group const *)arg1)->child(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget *)0;
  }
}


EXPORT int _wrap_Fl_Group_find (Fl_Group *larg1, Fl_Widget *larg2) {
  int lresult = (int)0 ;
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((Fl_Group const *)arg1)->find((Fl_Widget const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Group_resize (Fl_Group *larg1, int larg2, int larg3, int larg4, int larg5) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->resize(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Group *_wrap_new_Fl_Group (int larg1, int larg2, int larg3, int larg4, char *larg5) {
  Fl_Group * lresult = (Fl_Group *)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  Fl_Group *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (Fl_Group *)new Fl_Group(arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Group *)0;
  }
}


EXPORT void _wrap_delete_Fl_Group (Fl_Group *larg1) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_add (Fl_Group *larg1, Fl_Widget *larg2) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_insert (Fl_Group *larg1, Fl_Widget *larg2, int larg3) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *arg2 = 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->insert(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_insert_before (Fl_Group *larg1, Fl_Widget *larg2, Fl_Widget *larg3) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *arg2 = 0 ;
  Fl_Widget *arg3 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->insert(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_remove__SWIG_0 (Fl_Group *larg1, int larg2) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->remove(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_remove__SWIG_1 (Fl_Group *larg1, Fl_Widget *larg2) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->remove(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_clear (Fl_Group *larg1) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_resizable__SWIG_0 (Fl_Group *larg1, Fl_Widget *larg2) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->resizable(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Widget *_wrap_Fl_Group_resizable__SWIG_1 (Fl_Group *larg1) {
  Fl_Widget * lresult = (Fl_Widget *)0 ;
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Widget *)((Fl_Group const *)arg1)->resizable();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget *)0;
  }
}


EXPORT void _wrap_Fl_Group_add_resizable (Fl_Group *larg1, Fl_Widget *larg2) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_resizable(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_init_sizes (Fl_Group *larg1) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->init_sizes();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Group_clip_children__SWIG_0 (Fl_Group *larg1, int larg2) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->clip_children(arg2);
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Group_clip_children__SWIG_1 (Fl_Group *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)(arg1)->clip_children();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT Fl_Group *_wrap_Fl_Group_as_group (Fl_Group *larg1) {
  Fl_Group * lresult = (Fl_Group *)0 ;
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Group *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Group *)(arg1)->as_group();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Group *)0;
  }
}


EXPORT void _wrap_Fl_Group_focus (Fl_Group *larg1, Fl_Widget *larg2) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->focus(arg2);
    
  } catch (...) {
    
  }
}


EXPORT Fl_Widget **_wrap_Fl_Group__ddfdesign_kludge (Fl_Group *larg1) {
  Fl_Widget ** lresult = (Fl_Widget **)0 ;
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  Fl_Widget **result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Widget **) &(arg1)->_ddfdesign_kludge();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Widget **)0;
  }
}


EXPORT void _wrap_Fl_Group_forms_end (Fl_Group *larg1) {
  Fl_Group *arg1 = (Fl_Group *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->forms_end();
    
  } catch (...) {
    
  }
}


EXPORT Fl_End *_wrap_new_Fl_End () {
  Fl_End * lresult = (Fl_End *)0 ;
  Fl_End *result = 0 ;
  
  try {
    result = (Fl_End *)new Fl_End();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_End *)0;
  }
}


EXPORT void _wrap_delete_Fl_End (Fl_End *larg1) {
  Fl_End *arg1 = (Fl_End *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#include "FL/Fl_Window.H"

EXPORT Fl_Window *_wrap_new_Fl_Window_3 (int larg1, int larg2, char *larg3) {
  Fl_Window * lresult = (Fl_Window *)0 ;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  Fl_Window *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (Fl_Window *)new Fl_Window(arg1,arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT Fl_Window *_wrap_new_Fl_Window_5 (int larg1, int larg2, int larg3, int larg4, char *larg5) {
  Fl_Window * lresult = (Fl_Window *)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  Fl_Window *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (Fl_Window *)new Fl_Window(arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT void _wrap_delete_Fl_Window (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Window_handle (Fl_Window *larg1, int larg2) {
  int lresult = (int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->handle(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Window_resize (Fl_Window *larg1, int larg2, int larg3, int larg4, int larg5) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->resize(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_border__SWIG_0 (Fl_Window *larg1, int larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->border(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_clear_border (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear_border();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Window_border__SWIG_1 (Fl_Window *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Window const *)arg1)->border();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Window_set_override (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_override();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Window_override (Fl_Window *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Window const *)arg1)->override();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Window_set_modal (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_modal();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Window_modal (Fl_Window *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Window const *)arg1)->modal();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Window_set_non_modal (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_non_modal();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Window_non_modal (Fl_Window *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Window const *)arg1)->non_modal();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Window_set_menu_window (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_menu_window();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Window_menu_window (Fl_Window *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Window const *)arg1)->menu_window();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Window_set_tooltip_window (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->set_tooltip_window();
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Window_tooltip_window (Fl_Window *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Window const *)arg1)->tooltip_window();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Window_hotspot__SWIG_0 (Fl_Window *larg1, int larg2, int larg3, int larg4) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->hotspot(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_hotspot__SWIG_1 (Fl_Window *larg1, Fl_Widget *larg2, int larg3) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  Fl_Widget *arg2 = (Fl_Widget *) 0 ;
  int arg3 = (int) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->hotspot((Fl_Widget const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_free_position (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->free_position();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_size_range (Fl_Window *larg1, int larg2, int larg3, int larg4, int larg5, int larg6, int larg7, int larg8) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 0 ;
  int arg6 = (int) 0 ;
  int arg7 = (int) 0 ;
  int arg8 = (int) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    (arg1)->size_range(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Fl_Window_label__SWIG_0 (Fl_Window *larg1) {
  char * lresult = (char *)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Fl_Window const *)arg1)->label();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_Fl_Window_iconlabel__SWIG_0 (Fl_Window *larg1) {
  char * lresult = (char *)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Fl_Window const *)arg1)->iconlabel();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Fl_Window_label__SWIG_1 (Fl_Window *larg1, char *larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->label((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_iconlabel__SWIG_1 (Fl_Window *larg1, char *larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->iconlabel((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_label__SWIG_2 (Fl_Window *larg1, char *larg2, char *larg3) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->label((char const *)arg2,(char const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_copy_label (Fl_Window *larg1, char *larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->copy_label((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_default_xclass__SWIG_0 (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    Fl_Window::default_xclass((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_Fl_Window_default_xclass__SWIG_1 () {
  char * lresult = (char *)0 ;
  char *result = 0 ;
  
  try {
    result = (char *)Fl_Window::default_xclass();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_Fl_Window_xclass__SWIG_0 (Fl_Window *larg1) {
  char * lresult = (char *)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((Fl_Window const *)arg1)->xclass();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_Fl_Window_xclass__SWIG_1 (Fl_Window *larg1, char *larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->xclass((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_default_icon (Fl_RGB_Image *larg1) {
  Fl_RGB_Image *arg1 = (Fl_RGB_Image *) 0 ;
  
  arg1 = larg1;
  try {
    Fl_Window::default_icon((Fl_RGB_Image const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_default_icons (Fl_RGB_Image **larg1, int larg2) {
  Fl_RGB_Image **arg1 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl_Window::default_icons((Fl_RGB_Image const *(*))arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_icon__SWIG_0 (Fl_Window *larg1, Fl_RGB_Image *larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  Fl_RGB_Image *arg2 = (Fl_RGB_Image *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->icon((Fl_RGB_Image const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_icons (Fl_Window *larg1, Fl_RGB_Image **larg2, int larg3) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  Fl_RGB_Image **arg2 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->icons((Fl_RGB_Image const *(*))arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_Fl_Window_icon__SWIG_1 (Fl_Window *larg1) {
  void * lresult = (void *)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((Fl_Window const *)arg1)->icon();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_Fl_Window_icon__SWIG_2 (Fl_Window *larg1, void *larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->icon((void const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Window_shown (Fl_Window *larg1) {
  int lresult = (int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->shown();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Fl_Window_show (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->show();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_hide (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->hide();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_fullscreen (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->fullscreen();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_fullscreen_off__SWIG_0 (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->fullscreen_off();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_fullscreen_off__SWIG_1 (Fl_Window *larg1, int larg2, int larg3, int larg4, int larg5) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->fullscreen_off(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_Fl_Window_fullscreen_active (Fl_Window *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((Fl_Window const *)arg1)->fullscreen_active();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_Fl_Window_fullscreen_screens (Fl_Window *larg1, int larg2, int larg3, int larg4, int larg5) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->fullscreen_screens(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_iconize (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->iconize();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Window_x_root (Fl_Window *larg1) {
  int lresult = (int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Window const *)arg1)->x_root();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_Window_y_root (Fl_Window *larg1) {
  int lresult = (int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((Fl_Window const *)arg1)->y_root();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT Fl_Window *_wrap_Fl_Window_current () {
  Fl_Window * lresult = (Fl_Window *)0 ;
  Fl_Window *result = 0 ;
  
  try {
    result = (Fl_Window *)Fl_Window::current();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT void _wrap_Fl_Window_make_current (Fl_Window *larg1) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->make_current();
    
  } catch (...) {
    
  }
}


EXPORT Fl_Window *_wrap_Fl_Window_as_window (Fl_Window *larg1) {
  Fl_Window * lresult = (Fl_Window *)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  Fl_Window *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (Fl_Window *)(arg1)->as_window();
    lresult = result;
    return lresult;
  } catch (...) {
    return (Fl_Window *)0;
  }
}


EXPORT void _wrap_Fl_Window_cursor__SWIG_0 (Fl_Window *larg1, Fl_Cursor larg2, Fl_Color larg3, Fl_Color larg4) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  Fl_Cursor arg2 ;
  Fl_Color arg3 = (Fl_Color) FL_BLACK ;
  Fl_Color arg4 = (Fl_Color) FL_WHITE ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->cursor(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_cursor__SWIG_1 (Fl_Window *larg1, Fl_RGB_Image *larg2, int larg3, int larg4) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  Fl_RGB_Image *arg2 = (Fl_RGB_Image *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->cursor((Fl_RGB_Image const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_default_cursor (Fl_Window *larg1, Fl_Cursor larg2, Fl_Color larg3, Fl_Color larg4) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  Fl_Cursor arg2 ;
  Fl_Color arg3 = (Fl_Color) FL_BLACK ;
  Fl_Color arg4 = (Fl_Color) FL_WHITE ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->default_cursor(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Fl_Window_default_callback (Fl_Window *larg1, void *larg2) {
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    Fl_Window::default_callback(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Fl_Window_decorated_w (Fl_Window *larg1) {
  int lresult = (int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->decorated_w();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Fl_Window_decorated_h (Fl_Window *larg1) {
  int lresult = (int)0 ;
  Fl_Window *arg1 = (Fl_Window *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)(arg1)->decorated_h();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


